<<<<<<< HEAD
View(ISAttacks2015)
str(date)
ISAttacks2015$date <- as.Date(ISAttacks2015$date, "%Y-%m-%d")#Y for 4-digit
View(ISAttacks2015)
str(date)
str(ISAttacks2015)
ISAttacks2015[order(ISAttacks2015$date),]
View(ISAttacks2015)
ISAttacks2015 <- ISAttacks2015[order(ISAttacks2015$date),]
View(ISAttacks2015)
date <- c('2015-11-13', '2015-03-18', '2015-06-26', '2015-11-12', '2015-10-31', '2015-10-10', '2015-06-26', '2015-05-22', '2015-03-21')
country <- c('France', 'Tunisia', 'Tunisia', 'Lebanon', 'Egypt', 'Turkey', 'Kuwait', 'Saudi Arabia', 'Yemen')
city <- c('Paris', 'Tunis', 'Sousse', 'Beirut', 'Sunmarine', 'Ankara', 'Kuwait City', 'Qatif', 'Sana\'a')
deaths <- c(129, 19, 38, 43, 224, 102, 27, 21, 137)
ISAttacks2015 <- data.frame(date, country, city, deaths, stringsAsFactors=FALSE)
ISAttacks2015$date <- as.Date(ISAttacks2015$date, "%Y-%m-%d")#Y for 4-digit
ISAttacks <- ISAttacks2015[order(ISAttacks2015$date),]
View(ISAttacks)
View(ISAttacks2015)
date <- c('2015-11-13', '2015-11-12', '2015-10-31', '2015-10-10', '2015-06-26', '2015-06-26', '2015-05-22', '2015-03-21','2015-03-18')
country <- c('France', 'Lebanon', 'Egypt', 'Turkey', 'Tunisia', 'Kuwait', 'Saudi Arabia', 'Yemen', 'Tunisia')
city <- c('Paris', 'Beirut', 'Sunmarine', 'Ankara', 'Sousse', 'Kuwait City', 'Qatif', 'Sana\'a', 'Tunis')
deaths <- c(129, 43, 224, 102, 38, 27, 21, 137, 19)
ISAttacks2015 <- data.frame(date, country, city, deaths, stringsAsFactors=FALSE)
ISAttacks2015$date <- as.Date(ISAttacks2015$date, "%Y-%m-%d")#Y for 4-digit
View(ISAttacks2015)
date <- c('2015-11-13', '2015-11-12', '2015-10-31', '2015-10-10', '2015-06-26', '2015-06-26', '2015-05-22', '2015-03-21','2015-03-18')
country <- c('France', 'Lebanon', 'Egypt', 'Turkey', 'Tunisia', 'Kuwait', 'Saudi Arabia', 'Yemen', 'Tunisia')
city <- c('Paris', 'Beirut', 'Sharm el Sheikh', 'Ankara', 'Sousse', 'Kuwait City', 'Qatif', 'Sana\'a', 'Tunis')
deaths <- c(129, 43, 224, 102, 38, 27, 21, 137, 19)
ISAttacks2015 <- data.frame(date, country, city, deaths, stringsAsFactors=FALSE)
ISAttacks2015$date <- as.Date(ISAttacks2015$date, "%Y-%m-%d")#Y for 4-digit
View(ISAttacks2015)
date <- c('2015-11-13', '2015-11-12', '2015-10-31', '2015-10-10', '2015-07-18', '2015-06-26', '2015-06-26', '2015-05-22', '2015-03-21','2015-03-18')
country <- c('France', 'Lebanon', 'Egypt', 'Turkey', 'Tunisia', 'Iraq', 'Kuwait', 'Saudi Arabia', 'Yemen', 'Tunisia')
city <- c('Paris', 'Beirut', 'Sharm el Sheikh', 'Ankara', 'Sousse', 'Khan Bani Saad', 'Kuwait City', 'Qatif', 'Sana\'a', 'Tunis City')
deaths <- c(129, 43, 224, 102, 38, 125, 27, 21, 137, 19)
ISAttacks2015 <- data.frame(date, country, city, deaths, stringsAsFactors=FALSE)
ISAttacks2015$date <- as.Date(ISAttacks2015$date, "%Y-%m-%d")#Y for 4-digit
View(ISAttacks2015)
str(ISAttacks2015)
name <- c("Monkey D. Luffy", "Roronoa Zoro", "Nami", "Sanji")
occupation <- c("Captain", "Swordsman", "Navigator", "Chef")
bounty <- c(500000000, 320000000, 66000000, NA)
age <- c(19, 21, 20, 21)
birthday <- c("5/5/1996", "11/11/1994", "7/3/1995", "3/2/1994")
strength <- c(99, 90, 15, 80)
intelligence <- c(20, 30, 90, 40)
strawHatPirate <- data.frame(name, occupation, bounty, age, birthday, strength, intelligence, stringsAsFactors=FALSE)
name2 <- c("Monkey D. Luffy", "Tony Tony Chopper", "Nico Robin", "Brook")
devilFruit <- c("Rubber", "Human", "Flower", "Underworld")
devilFruitList <- cbind(name2, devilFruit)
devilFruitList <- data.frame(name2, devilFruit, stringsAsFactors=FALSE)
View(strawHatPirate)
View(devilFruitList)
devilFruitStrawHatPirate <- merge(strawHatPirate, devilFruitList, by.x="name", by.y="name2")
View(devilFruitStrawHatPirate)
devilFruitStrawHatPirate <- merge(strawHatPirate, devilFruitList, by.x="name", by.y="name2", all.x=TRUE)#使用all.x=TRUE的option
View(devilFruitStrawHatPirate)
devilFruitStrawHatPirate <- merge(strawHatPirate, devilFruitList, by.x="name", by.y="name2", all.y=TRUE)#使用all.y=TRUE的option
View(devilFruitStrawHatPirate)
devilFruitStrawHatPirate <- merge(strawHatPirate, devilFruitList, by.x="name", by.y="name2", all.x=TRUE, all.y=TRUE)#使用all.x=TRUE與all.y=TRUE的option
View(devilFruitStrawHatPirate)
View(strawHatPirate)
chopper <- c("Tony Tony Chopper", "Doctor", 50, 17, "12/24/1998", 50, 80)
chopper <- c("Tony Tony Chopper", "Doctor", 50, 17, "12/24/1998", 50, 80)
strawHatPirate2 <- rbind(strawHatPirate, chopper)
View(strawHatPirate2)
strawHatPirate3 <- strawHatPirate2[, c(1:3)]#取前3個變數
View(strawHatPirate3)
strawHatPirate3 <- strawHatPirate2[, c("name", "occupation", "bounty")]#取前3個變數
View(strawHatPirate3)
strawHatPirate4 <- strawHatPirate2[, -c(1:3)]#刪除前3個變數
View(strawHatPirate4)
strawHatPirate4 <- strawHatPirate2[, -c("name", "occupation", "bounty")]#刪除前3個變數
strawHatPirate4 <- strawHatPirate2[, !c("name", "occupation", "bounty")]#刪除前3個變數
strawHatPirate4 <- strawHatPirate2[, -c(1:3)]#刪除前3個變數
View(strawHatPirate3)
strawHatPirate4 <- strawHatPirate2[, c(-1:-3)]#刪除前3個變數
View(strawHatPirate4)
strawHatPirate4 <- strawHatPirate2[, c(-"name", -"occupation", -"bounty")]#刪除前3個變數
deleteVars <- names(strawHatPirate2) %in% c("name", "occupation", "bounty")#logical test
strawHatPirate4 <- strawHatPirate2[!deleteVars]#刪除前3個變數
View(strawHatPirate4)
View(strawHatPirate2)
strawHatPirate5 <- strawHatPirate2[1:3, ]#選擇前3列
View(strawHatPirate5)
attach(strawHatPirate2)
strawHatPirate5 <- strawHatPirate2[age>17 & occupation=='Captain',]
detach(strawHatPirate2)
View(strawHatPirate5)
attach(strawHatPirate2)
strawHatPirate5 <- strawHatPirate2[age>17 & occupation=='Captain',]
View(strawHatPirate5)
attach(strawHatPirate2)
strawHatPirate5 <- strawHatPirate2[age>17 & occupation=="Captain",]
detach(strawHatPirate2)
attach(strawHatPirate2)
strawHatPirate5 <- strawHatPirate2[occupation=="Captain",]
View(strawHatPirate5)
attach(strawHatPirate2)
strawHatPirate5 <- strawHatPirate2[occupation==="Captain",]
attach(strawHatPirate2)
strawHatPirate5 <- strawHatPirate2[occupation=="Captain",]
View(strawHatPirate5)
strawHatPirate5 <- strawHatPirate2[strawHatPirate2$occupation=='Captain', ]
View(strawHatPirate5)
View(strawHatPirate5)
View(strawHatPirate)
View(strawHatPirate2)
strawHatPirate5 <- strawHatPirate2[strawHatPirate2$age>17 & strawHatPirate2$strength>30, ]#2個篩選條件使用&連接
View(strawHatPirate5)
install.packages("sqldf")
strawHatPirate6 <- sqldf("select name, occupation, bounty from strawHatPirate2 where age>17 order by age")
library(sqldf)
strawHatPirate6 <- sqldf("select name, occupation, bounty from strawHatPirate2 where age>17 order by age")
View(strawHatPirate6)
strawHatPirate6 <- sqldf("select name, occupation, bounty, age from strawHatPirate2 where age>17 order by age")
View(strawHatPirate6)
strawHatPirate6 <- sqldf("select name, occupation, bounty, age from strawHatPirate2 where age>17 order by bounty")
View(strawHatPirate6)
View(strawHatPirate2)
sqldf("select avg(age) as avgAge from strawHatPirate2")
View(devilFruitList)
sqldf("select a.name, b.devilFruit from strawHatPirate2 a inner join devilFruitList on a.name=b.name2")
sqldf("select strawHatPirate2.name, devilFruitList.devilFruit from strawHatPirate2 inner join devilFruitList on strawHatPirate2.name=devilFruitList.name2")
q()
q()
naExample <- c(88, NA, 12, 92, 33)
nullExample <- c(88, NULL, 12, 92, 33)
mean(naExample)
mean(naExample, na.rm=TRUE)#na.rm as in NA removoe
mean(nullExample)
matrix <- matrix(1:8, nrow=2)#創造一個2*4的矩陣做範例
matrix
apply(matrix, 1, sum)#把各列加總
apply(matrix, 2, sum)#把各欄加總
sumRow <- apply(matrix, 1, sum)#把各列加總
sumColumn <- apply(matrix, 2, sum)#把各欄加總
typeof(sumRow)
class(sumRow)
str(sumRow)
str(matrix)
class(matrix)
fn <- function(x){
x/10
}
fnRow <- apply(matrix, 1, fn)
fnRow
matrix
fnColumn <- apply(matrix, 2, fn)
fnColumn
?max()
max
min
maximum <- function(x){
sortX <- sort(x, decreasing=TRUE)
return sortX[1]
}
fnRow <- apply(matrix, 1, fn)
maximum <- function(x){
sortX <- sort(x, decreasing=TRUE)
return sortX[1]
}
maximum <- function(x){
return sort(x, decreasing=TRUE)[1]
}
maximum <- function(x){
sort(x, decreasing=TRUE)[1]
}
maxRow <- apply(matrix, 1, maximum)
maxColumn <- apply(matrix, 2, maximum)
maxRow
maxColumn
matrix
maximum <- function(x){
sort(x)[1]
}
maxRow <- apply(matrix, 1, maximum)
maxColumn <- apply(matrix, 2, maximum)
maximum <- function(x){
sort(x, decreasing=TRUE)[1]
}
maxRow <- apply(matrix, 1, maximum)
maxColumn <- apply(matrix, 2, maximum)
findOutliers <- function(x){
findOutlier <- function(xrow){
medianXRow <- median(xrow)
distance <- abs(xrow-medianXRow)
return(which.max(distance))
}
return(apply(x, 1, findOutlier))
}
salesMatrix <- matrix(c(1,2,30,1,10,11,1,50,60), nrow=3)
salesMatrix
salesMatrix <- matrix(c(1,2,30,1,10,11,1,50,60), nrow=3, byrow=TRUE)
salesMatrix
findOutliers(salesMatrix)
findOutliers <- function(x){
findOutlier <- function(xrow){
medianXRow <- median(xrow)
distance <- abs(xrow-medianXRow)
return(which.max(distance))
}
return(apply(x, 2, findOutlier))
}
salesMatrix <- matrix(c(1,2,30,1,10,11,1,50,60), nrow=3, byrow=TRUE)
findOutliers(salesMatrix)
findOutliers <- function(x){
findOutlier <- function(xrow){
medianXRow <- median(xrow)
distance <- abs(xrow-medianXRow)
return(max(distance))
}
return(apply(x, 1, findOutlier))
}
salesMatrix <- matrix(c(1,2,30,1,10,11,1,50,60), nrow=3, byrow=TRUE)
findOutliers(salesMatrix)
findOutliers <- function(x){
findOutlier <- function(xrow){
medianXRow <- median(xrow)
distance <- abs(xrow-medianXRow)
return(which.max(distance))
}
return(apply(x, 1, findOutlier))
}
salesMatrix <- matrix(c(1,2,30,1,10,11,1,50,60), nrow=3, byrow=TRUE)
findOutliers(salesMatrix)
findOutliers <- function(x){
findOutlier <- function(xrow){
medianXRow <- median(xrow)
distance <- abs(xrow-medianXRow)
return(which.max(distance))
}
return(apply(x, 1, findOutlier))
}
salesMatrix <- matrix(c(1,2,30,1,10,11,50,1,60), nrow=3, byrow=TRUE)
findOutliers(salesMatrix)#告訴你第一列的第三個元素、第二列的第一個
list(1:5, 11:15)
lapply(list1, meadian)#應用median函數到list1
lapply(list1, median)#應用median函數到list1
list1 <- list(1:5, 11:15)#創造一個包含兩個vector的list
lapply(list1, median)#應用median函數到list1
sapply(list1, median)#應用median函數到list1
name <- c("Monkey D. Luffy", "Roronoa Zoro", "Nami", "Sanji")
occupation <- c("Captain", "Swordsman", "Navigator", "Chef")
bounty <- c(500000000, 320000000, 66000000, NA)
age <- c(19, 21, 20, 21)
birthday <- c("5/5/1996", "11/11/1994", "7/3/1995", "3/2/1994")
strength <- c(99, 90, 15, 80)
intelligence <- c(20, 30, 90, 40)
strawHatPirate <- data.frame(name, occupation, bounty, age, birthday, strength, intelligence, stringsAsFactors=FALSE)
lapply(strawHatPirate, sort)#對每個變數都應用sort函數
sapply(strawHatPirate, sort)#對每個變數都應用sort函數
name <- c("Monkey D. Luffy", "Roronoa Zoro", "Nami", "Sanji")
occupation <- c("Captain", "Swordsman", "Navigator", "Chef")
bounty <- c(500000000, 320000000, 66000000, NA)
age <- c(19, 21, 20, 21)
birthday <- c("5/5/1996", "11/11/1994", "7/3/1995", "3/2/1994")
strength <- c(99, 90, 15, 80)
intelligence <- c(20, 30, 90, 40)
strawHatPirate <- data.frame(name, occupation, bounty, age, birthday, strength, intelligence, stringsAsFactors=FALSE)
strawHatPirate$birthdayAsDate <- as.Date(strawHatPirate$birthday, "%m/%d/%Y")#Y for 4-digit, y for 2-digit
lapply(strawHatPirate, sort)#對每個變數都應用sort函數
sapply(strawHatPirate, sort)#對每個變數都應用sort函數
strawHatPirate <- strawHatPirate[ ,-c("birthday")]
View(strawHatPirate)
strawHatPirate <- strawHatPirate[ ,-5]
View(strawHatPirate)
lapply(strawHatPirate, sort)#對每個變數都應用sort函數
sapply(strawHatPirate, sort)#對每個變數都應用sort函數
diabetes <- factor(c("Type1", "Type2", "Type1", "Type1"))
status <- factor(c("Poor", "Improved", "Excellent", "Poor"))
patient <- 1:4
patient <- as.character(1:4)
patient <- as.character(1:4)
diabetes <- factor(c("Type1", "Type2", "Type1", "Type1"))
status <- factor(c("Poor", "Improved", "Excellent", "Poor"))
patientDataFrame <- data.frame(patient, diabetes, status)
str(patientDataFrame)
patient <- as.character(1:4)
age <- (33, 55, 60, 75)
diabetes <- factor(c("Type1", "Type2", "Type1", "Type1"))
status <- factor(c("Poor", "Improved", "Excellent", "Poor"))
patientDataFrame <- data.frame(patient, diabetes, status, stringsAsFactors=F)
str(patientDataFrame)
status
tapply(age, diabetes, mean)
tapply(age, status, mean)
status <- c("Poor", "Improved", "Excellent", "Poor")
tapply(age, status, mean)#
status
diabetes
status <- c("Poor", "Improved", "Excellent", "Poor")
statusF <- factor(status)
status <- factor(c("Poor", "Improved", "Excellent", "Poor"))
age <- c(20, 33, 55, 72)
tapply(age, status, mean)
status <- factor(c("Poor", "Improved", "Excellent", "Poor", "Excellent"))
age <- c(20, 33, 55, 72, 61)
tapply(age, status, mean)
q()
# Accidents of Formosa Fun Coast
# Data Manipulation
setwd("C:/ApplicationInR/funCoastAccident")
Sys.setlocale(category = "LC_ALL", locale = "cht")#csv檔是繁體中文
accidentList <- read.csv("data/funCoastAccident.csv", header=TRUE, sep=",", colClasses=c("character", "character", "character", "character", "character", "character", "integer", "character", "character"), na.strings=c(''))
colnames(accidentList) <- c("no", "county", "hospital", "gender", "nationality", "age", "woundType1", "woundType2")
accidentList$woundType1[is.na(accidentList$woundType1)] <- '不詳'
accidentList$woundType2[is.na(accidentList$woundType2)] <- '不詳'
accidentList$woundType1 <- factor(accidentList$woundType1, order=TRUE, levels=c("檢傷四級", "檢傷三級", "檢傷二級", "檢傷一級", "不詳"))
accidentList$woundType2 <- factor(accidentList$woundType2, order=TRUE, levels=c("輕傷", "中傷", "重傷", "不詳"))
saveRDS(accidentList, "data/accidentList.rds")
accidentList <- read.table("data/funCoastAccident.csv", header=TRUE, sep=",", colClasses=c("character", "character", "character", "character", "character", "character", "integer", "character", "character"), na.strings=c(''))
# Accidents of Formosa Fun Coast
# Data Manipulation
setwd("C:/ApplicationInR/funCoastAccident")
Sys.setlocale(category = "LC_ALL", locale = "cht")#csv檔是繁體中文
accidentList <- read.csv("data/funCoastAccident.csv", header=TRUE, sep=",", colClasses=c("character", "character", "character", "character", "character", "integer", "character", "character"), na.strings=c(''))
colnames(accidentList) <- c("no", "county", "hospital", "gender", "nationality", "age", "woundType1", "woundType2")
accidentList$woundType1[is.na(accidentList$woundType1)] <- '不詳'
accidentList$woundType2[is.na(accidentList$woundType2)] <- '不詳'
accidentList$woundType1 <- factor(accidentList$woundType1, order=TRUE, levels=c("檢傷四級", "檢傷三級", "檢傷二級", "檢傷一級", "不詳"))
accidentList$woundType2 <- factor(accidentList$woundType2, order=TRUE, levels=c("輕傷", "中傷", "重傷", "不詳"))
saveRDS(accidentList, "data/accidentList.rds")
setwd("C:/NTUTrainRL2")
Sys.setlocale(category = "LC_ALL", locale = "cht")
accidentList <- readRDS('data/accidentList.rds')
colnames(accidentList) <- c("編號","醫院所在縣市別", "醫院別", "性別", "國籍別", "年齡", "醫療檢傷", "救護檢傷")
summary(accidentList)
accidentListNew <- accidentList[accidentList$年齡==101,]
View(accidentListNew)
View(accidentList)
accidentListNew <- accidentList[accidentList$性別=='男',]
View(accidentListNew)
accidentListNew <- accidentList[accidentList$性別=='女',]
View(accidentListNew)
accidentListNew <- accidentList[accidentList$年齡==101.00,]
View(accidentListNew)
accidentListNew <- accidentList[!accidentList$編號=='H326622',]
View(accidentListNew)
summary(accidentList)
View(accidentListNew)
par(mfrow=c(3,2))
barPlots <- function(){
variables <- names(accidentListNew[, c(-1, -2, -5)])
for (name in variables){
barplot(table(accidentListNew[ ,name]), main=paste("依",name), ylab="人數")
}
}
barPlots()
barplot(table(accidentListNew$醫院別), main="依醫院別", ylab="人數", las=2)
barPlots <- function(){
variables <- names(accidentListNew[, c(-1, -3, -5)])
for (name in variables){
barplot(table(accidentListNew[ ,name]), main=paste("依",name), ylab="人數")
}
}
barPlots()
barplot(table(accidentListNew$醫院別), main="依醫院別", ylab="人數", las=2)
par(mfrow=c(1,1))
hist(na.omit(accidentListNew$年齡), xlab="年齡", ylab="密度",  main="依年齡", breaks=15, freq=FALSE, ylim=c(0, 0.12), col="skyblue")
rug(jitter(accidentListNew$年齡))#在X軸上顯示資料密度
lines(density(accidentListNew$年齡, na.rm=TRUE), col="red", lwd=2)#hist的freq要設為false才看得到
```{r}
par(mfrow=c(3,2))
barPlots <- function(){
variables <- names(accidentListNew[, c(-1, -3, -4)])
for (name in variables){
barplot(table(accidentListNew[ ,name]), main=paste("依",name), ylab="人數")
}
}
barPlots()
barplot(table(accidentListNew$醫院別), main="依醫院別", ylab="人數", las=2)
```
par(mfrow=c(3,2))
barPlots <- function(){
variables <- names(accidentListNew[, c(-1, -3, -6)])
for (name in variables){
barplot(table(accidentListNew[ ,name]), main=paste("依",name), ylab="人數")
}
}
barPlots()
barplot(table(accidentListNew$醫院別), main="依醫院別", ylab="人數", las=2)
par(mfrow=c(3,2))
boxPlots <- function(){
variables <- names(accidentListNew[, c(-1, -3, -6)])
for (name in variables){
boxplot(年齡 ~ accidentListNew[ ,name], data=accidentListNew, main=paste('年齡依',name))
}
}
boxPlots()
accidentListShort <- accidentListNew[accidentListNew$醫院所在縣市別=='桃園市' & accidentListNew$年齡!=NA, ]
View(accidentListShort)
View(accidentListShort)
accidentListShort <- accidentListNew[accidentListNew$醫院所在縣市別=='桃園市',]
View(accidentListShort)
accidentListShort <- accidentListNew[accidentListNew$醫院所在縣市別=='桃園市' & !is.na(accidentListNew$年齡), ]
View(accidentListShort)
dotchart(accidentListShort$年齡,labels=row.names(accidentListShort),cex=.7)
par(mfrow=c(1,1))
dotchart(accidentListShort$年齡,labels=row.names(accidentListShort),cex=.7)
# Accidents of Formosa Fun Coast
# Data Manipulation
setwd("C:/ApplicationInR/funCoastAccident")
Sys.setlocale(category = "LC_ALL", locale = "cht")#csv檔是繁體中文
accidentList <- read.csv("data/funCoastAccident.csv", header=TRUE, sep=",", row.names="編號", colClasses=c("character", "character", "character", "character", "character", "integer", "character", "character"), na.strings=c(''))
colnames(accidentList) <- c("county", "hospital", "gender", "nationality", "age", "woundType1", "woundType2")
accidentList$woundType1[is.na(accidentList$woundType1)] <- '不詳'
accidentList$woundType2[is.na(accidentList$woundType2)] <- '不詳'
accidentList$woundType1 <- factor(accidentList$woundType1, order=TRUE, levels=c("檢傷四級", "檢傷三級", "檢傷二級", "檢傷一級", "不詳"))
accidentList$woundType2 <- factor(accidentList$woundType2, order=TRUE, levels=c("輕傷", "中傷", "重傷", "不詳"))
saveRDS(accidentList, "data/accidentList.rds")
setwd("C:/NTUTrainRL2")
Sys.setlocale(category = "LC_ALL", locale = "cht")
accidentList <- readRDS('data/accidentList.rds')
colnames(accidentList) <- c("醫院所在縣市別", "醫院別", "性別", "國籍別", "年齡", "醫療檢傷", "救護檢傷")
summary(accidentList)
accidentList$年齡
accidentListNew <- accidentList[accidentList$年齡==101, ]
View(accidentListNew)
accidentListNew <- accidentList[accidentList$年齡 < 101 or is.na(accidentList$年齡)=TRUE, ]
accidentListNew <- accidentList[accidentList$年齡 < 101 | is.na(accidentList$年齡)=TRUE, ]
accidentListNew <- accidentList[accidentList$年齡 < 101 | !is.na(accidentList$年齡), ]
View(accidentListNew)
accidentListNew <- accidentList[accidentList$年齡==101, ]
View(accidentListNew)
accidentListNew <- accidentList[accidentList$年齡!=101, ]
View(accidentListNew)
head(accidentListNew)
accidentListNew <- subset(accidentList, 年齡!=101)
View(accidentListNew)
accidentListNew <- subset(accidentList, 年齡!=101 | is.na(年齡)=TRUE)
accidentListNew <- subset(accidentList, 年齡!=101 | is.na(年齡))
View(accidentListNew)
par(mfrow=c(3,2))
barPlots <- function(){
variables <- names(accidentListNew[, c(-2, -5)])
for (name in variables){
barplot(table(accidentListNew[ ,name]), main=paste("依",name), ylab="人數")
}
}
barPlots()
barplot(table(accidentListNew$醫院別), main="依醫院別", ylab="人數", las=2)
par(mfrow=c(1,1))
hist(na.omit(accidentListNew$年齡), xlab="年齡", ylab="密度",  main="依年齡", breaks=15, freq=FALSE, ylim=c(0, 0.12), col="skyblue")
rug(jitter(accidentListNew$年齡))#在X軸上顯示資料密度
lines(density(accidentListNew$年齡, na.rm=TRUE), col="red", lwd=2)#hist的freq要設為false才看得到
par(mfrow=c(3,2))
boxPlots <- function(){
variables <- names(accidentListNew[, c(-2, -5)])
for (name in variables){
boxplot(年齡 ~ accidentListNew[ ,name], data=accidentListNew, main=paste('年齡依',name))
}
}
boxPlots()
accidentListShort <- accidentListNew[accidentListNew$醫院所在縣市別=='桃園市' & !is.na(accidentListNew$年齡), ]
accidentListShortOrder <- accidentListShort[order(accidentListShort$年齡), ]
dotchart(accidentListShortOrder$年齡,labels=row.names(accidentListShortOrder),cex=.7)
par(mfrow=c(1,1))
dotchart(accidentListShortOrder$年齡,labels=row.names(accidentListShortOrder),cex=.7)
dotchart(accidentListShortOrder$年齡,labels=row.names(accidentListShortOrder),cex=.7, main="點圖依年齡")
dotchart(accidentListShortOrder$年齡,labels=row.names(accidentListShortOrder),cex=.7, main="點圖依年齡", xlab="年齡", ylab="編號")
dotchart(accidentListShortOrder$年齡,labels=row.names(accidentListShortOrder),cex=.7, main="點圖依年齡", xlab="年齡")
table(accidentListNew$醫療檢傷)
woundType <- table(accidentListNew$醫療檢傷)
woundType
woundType[1]
woundType[[1]]
woundType[[1:5]]
woundType[[1]:[5]]
woundType[1]
length(woundType)
woundType[1][1]
woundType[[1]]
woundType[1][2]
woundType[1][1]
woundType[2][2]
woundType[2]
woundType[3]
woundType[3, 1]
woundType
woundType(1,1)
woundType <- as.vector(table(accidentListNew$醫療檢傷))
woundType
slices <- as.vector(table(accidentListNew$醫療檢傷))
label <- names(table(accidentListNew$醫療檢傷))
slices <- as.vector(table(accidentListNew$醫療檢傷))#把table轉為向量
labels <- names(table(accidentListNew$醫療檢傷))#table就是有名字的向量
pie(slices, labels = labels, main="醫療檢傷比例")
slices <- as.vector(table(accidentListNew$醫療檢傷))#把table轉為向量
labels <- paste(names(table(accidentListNew$醫療檢傷)), "\n", slices)#table就是有名字的向量
pie(slices, labels = labels, main="醫療檢傷比例")
slices <- as.vector(table(accidentListNew$醫療檢傷))#把table轉為向量
labels <- paste(names(table(accidentListNew$醫療檢傷)), "\n", slices, "人", sep="")#table就是有名字的向量
pie(slices, labels = labels, main="醫療檢傷比例")
percentage <- round(slices/sum(slices)*100)
labels2 <- paste(labels, " ", percentage, "%", sep="")
pie(slices, labels=labels2, col=rainbow(length(labels2)), main="醫療檢傷比例")
percentage <- round(slices/sum(slices)*100)
labels2 <- paste(labels, " ", percentage, "%", sep="")
pie(slices, labels=labels2, col=rainbow(length(labels2)), main="醫療檢傷比例")
percentage <- round(slices/sum(slices)*100)
labels2 <- paste(names(table(accidentListNew$醫療檢傷)), " ", percentage, "%", sep="")
pie(slices, labels=labels2, col=rainbow(length(labels2)), main="醫療檢傷比例")
percentage <- round(slices/sum(slices)*100)
labels2 <- paste(names(table(accidentListNew$醫療檢傷)), "\n", percentage, "%", sep="")
pie(slices, labels=labels2, col=rainbow(length(labels2)), main="醫療檢傷比例")
slices <- as.vector(table(accidentListNew$醫療檢傷))#把table轉為向量
labels <- paste(names(table(accidentListNew$醫療檢傷)), "\n", slices, "人", sep="")#table就是有名字的向量
pie(slices, labels = labels, main="醫療檢傷人數")
=======
cartModel <- train(Class ~ ., data=train, method="rpart")
cartModel$finalModel
plot(cartModel$finalModel, uniform=T)
text(cartModel$finalModel, cex=0.8)
```
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
treeModel <- train(Area ~ ., data=olive, method="rpart")
newdata = as.data.frame(t(colMeans(olive)))
predict(treeModel, newdata)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelRandomforest <- randomForest(y ~ ., data = vowel.train)
varImp(modelRandomforest)
library(caret)
modelRandomforest <- randomForest(y ~ ., data = vowel.train)
install.packages("randomForest")
library(randomForest)
modelRandomforest <- randomForest(y ~ ., data = vowel.train)
varImp(modelRandomforest)
varImportance <- varImp(modelRandomforest)
order(varImportance)
View(varImportance)
order(varImportance$Overall)
order(varImportance$row.names)
modelRandomforest <- train(y ~ ., data = vowel.train, method="rf")
varImp(modelRandomforest)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelRF <- train(y ~ ., data=vowel.train, method="rf")
modelGBM <- train(y ~ ., data=vowel.train, method="gbm")
predictRF <- predict(modelRF, vowel.test)
predGBM <- predict(modelGBM, vowel.test)
confusionMatrix(predictRF, vowel.test$y)
confusionMatrix(predGBM, vowel.test$y)
pred <- data.frame(predictRF, predGBM, y=vowel.test$y, agree=predictRF == predGBM)
View(pred)
set.seed(62433)
modelRF <- train(diagnosis ~ ., data=training, method="rf")
modelGBM <- train(diagnosis ~ ., data=training, method="gbm")
modelLDA <- train(diagnosis ~ ., data=training, method="lda")
predictRF <- predict(modelRF, testing)
predictGBM <- predict(modelGBM, testing)
predictLDA <- predict(modelLDA, testing)
stackedPredict <- data.frame(predictRF, predictGBM, predictLDA, diagnosis=testing$diagnosis)
modelStacked <- train(diagnosis ~., data=stackedPredict, method="rf")
predictStacked <- predict(modelStacked, testing)
confusionMatrix(predictRF, testing$diagnosis)
confusionMatrix(predictGBM, testing$diagnosis)
confusionMatrix(predictLDA, testing$diagnosis)
confusionMatrix(predictStacked, testing$diagnosis)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modelRF <- train(diagnosis ~ ., data=training, method="rf")
modelGBM <- train(diagnosis ~ ., data=training, method="gbm")
modelLDA <- train(diagnosis ~ ., data=training, method="lda")
predictRF <- predict(modelRF, testing)
predictGBM <- predict(modelGBM, testing)
predictLDA <- predict(modelLDA, testing)
stackedPredict <- data.frame(predictRF, predictGBM, predictLDA, diagnosis=testing$diagnosis)
modelStacked <- train(diagnosis ~., data=stackedPredict, method="rf")
predictStacked <- predict(modelStacked, testing)
confusionMatrix(predictRF, testing$diagnosis)
confusionMatrix(predictGBM, testing$diagnosis)
confusionMatrix(predictLDA, testing$diagnosis)
confusionMatrix(predictStacked, testing$diagnosis)
install.packages("lubridate")
library(lubridate)  # For year() function below
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
dat = read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
modelBats <- bats(tstrain)
predictBats <- forecast(modelBats, level=95, h=dim(testing)[1])
install.packages("forecast")
modelBats <- bats(tstrain)
library(forecast)
modelBats <- bats(tstrain)
dim(testing)
dim(testing)[1]
nrow(testing)
predictBats <- forecast(modelBats, level=95, h=nrow(testing))
predictBats
combination <- data.frame(testing, predictBats)
View(combination)
combination$withinFlag <- combination$Lo.95<combination$visitsTumblr<combination$Hi.95
combination$withinFlag <- (combination$Lo.95<combination$visitsTumblr)&(combination$visitsTumblr<combination$Hi.95)
counts <- table(combination$withinFlag)
counts
prop.table(counts)
prop.table(counts)[2]
install.packages("e1071")
install.packages("e1071")
set.seed(325)
library(e1071)
modelSVM <- svm(CompressiveStrength ~., data=training)
library(e1071)
install.packages("e1071")
install.packages("e1071")
library(e1071)
modelSVM <- svm(CompressiveStrength ~., data=training)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
modelSVM <- svm(CompressiveStrength ~., data=training)
predictSVM <- predict(modelSVM, testing)
accuracySVM <- accuracy(predictSVM, testing$CompressiveStrength)
library(ElemStatLearn)
library(gbm)
accuracySVM <- accuracy(predictSVM, testing$CompressiveStrength)
library(forecast)
accuracySVM <- accuracy(predictSVM, testing$CompressiveStrength)
accuracySVM
set.seed(233)
modelLasso <- train(CompressiveStrength ~ ., data=training, method="lasso")
library(elasticnet)
modelLasso <- train(CompressiveStrength ~ ., data=training, method="lasso")
quit()
library(VIM)
str(sleep)
summary(sleep)
aggr(sleep, combined=T, numbers=T, prop=F, main='Missing Pattern of Sleep', ylab='')
indexInt <- sapply(sleep, is.integer)
sleepIntVar <- sleep[, indexInt]
sleepNumVar <- sleep[, !indexInt]
autoMfrow <- function(n){
if (n%2==0){
par(mfrow=c((n)/2,2))
}else{
par(mfrow=c((n+1)/2,2))
}
}
autoMfrow <- function(n) {
if (n%2==0){
par(mfrow=c((n)/2,2))
} else{
par(mfrow=c((n+1)/2,2))
}
}
autoMfrow <- function(numCnt) {
if (numCnt%2==0){
par(mfrow=c((numCnt)/2,2))
} else{
par(mfrow=c((numCnt+1)/2,2))
}
}
autoMfrow <- function(x){
if (x%%2==0){
par(mfrow=c((x)/2,2))
} else{
par(mfrow=c((x+1)/2,2))
}
}
numCnt <- ncol(sleepNumVar)
autoMfrow(numCnt)
quit()
library(VIM)
matrixplot(sleep)
quit()
quit()
fig_caption: false
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
coef(fit)
residual <- resid(fit)
squaredResidual <- residual^2
residualVariance <- sum(squaredResidual) / (length(residual) - 2)
sqrt(residualVariance)
data(mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
fit$sd
fit$coef
summary(fit)$coef
summary(fit)$coef[,2]
summary(fit)$coef[,2][2]
summary(fit)$coef[,2][2]
exp <- fit$coef[1] + mean(wt) * fit$coef[2]
exp - 2 * summary(fit)$coef[,2][2]
exp <- fit$coef[1] + mean(mtcars$wt) * fit$coef[2]
exp - 2 * summary(fit)$coef[,2][2]
exp <- fit$coef[1] + mean(mtcars$wt) * fit$coef[2]
summary(fit)$coef[,2][2][1]
exp <- fit$coef[1] + mean(mtcars$wt) * fit$coef[2]
summary(fit)$coef[,2][2][2]
exp <- fit$coef[1] + mean(mtcars$wt) * fit$coef[2]
str(summary(fit)$coef[,2][2])
exp <- fit$coef[1] + mean(mtcars$wt) * fit$coef[2]
type(summary(fit)$coef[,2][2])
typeof(summary(fit)$coef[,2][2])
exp - 2 * 0.5591
?mtcars
fit[[1]][1] + 3 * fit[[1]][2]
fit[[1]]
fit[[1]][1]
fit[[1]][1] + fit[[1]][2]*(3000/1000)
fit[[1]][1] + fit[[1]][2]*(3000/1000)
fit[[1]][1] + fit[[1]][2]*(3000/1000)
2 * (fit$coef[2] - 2 * summary(fit)$coef[,2][2])
2 * (fit$coef[2] - (2000/1000) * summary(fit)$coef[,2][2])
(fit$coef[2] - (2000/1000) * summary(fit)$coef[,2][2])
b1+c(1,-1)*qt(p = 0.975, df = fit$df)*summary(fit)$coef[,2][2]
summary(fit)$coef[,2]+c(1,-1)*qt(p = 0.975, df = fit$df)*summary(fit)$coef[,2][2]
summary(fit)$coef[,2][2]+c(1,-1)*qt(p = 0.975, df = fit$df)*summary(fit)$coef[,2][2]
summary(fit)
(2000/1000) * (fit$coef[2] - 2 * summary(fit)$coef[,2][2])
I have an outcome, $Y$, and a predictor, $X$ and fit a linear regression model with $\Y=beta_0+beta_1X+epsilon$ϵ to obtaain $beta_0$ and $beta_1$. What would be the consequence to the subsequent slope and intercept if I were to refit the model with a new regressor, $X+c$ for some constant, $c$?
attributes(fit)
squaredResiduals <- fit$residuals ^ 2
squaredResiduals <- fit$residuals ^ 2
fitCompared <- lm(mpg ~ 1, mtcars)
squaredComparedResiduals <- fitCompared$residuals ^ 2
sum(squaredResiduals)/sum(squaredComparedResiduals)
Refer back to the `mtcars` data set with mpg as an outcome and weight (wt) as the predictor. About what is the ratio of the the sum of the squared errors, $\sum_{i=1}^{n} (Y_i-\hat\Y_i)^2$ when comparing a model with just an intercept (denominator) to the model with the intercept and slope (numerator)?
fit[[1]][1] + fit[[1]][2]*(3000/1000)
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, mtcars)
summary(fit)$coef[3, 1]
summary(fit)
summary(fit)$coef
fitUnadjusted <- lm(mpg ~ cyl, mtcars)
summary(fitUnadjusted)$coef
fitUnadjusted <- lm(mpg ~ factor(cyl), mtcars)
summary(fitUnadjusted)$coef
fitNonInteraction <- lm(mpg ~ cyl + wt, mtcars)
summary(fitNonInteraction)$adj.r.squared
fitInteraction <- lm(mpg ~ cyl + wt + cyl:wt, mtcars)
summary(fitInteraction)$adj.r.squared
fitNonInteraction <- lm(mpg ~ factor(cyl) + wt, mtcars)
summary(fitNonInteraction)$adj.r.squared
fitInteraction <- lm(mpg ~ factor(cyl) + wt + factor(cyl):wt, mtcars)
summary(fitInteraction)$adj.r.squared
library(lmtest)
lrtest(fit_interaction, fit_non_interaction)
lrtest(fitInteraction, fitNonInteraction)
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit)$coef
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
max(hatvalues(fit))
influence.measures(fit)$infmat[5, 'dfb.x']
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
str(mtcars)
library(ggplot2)
ggplot(mtcars, aes(x=am, y=mpg, fill=transmission)) +
geom_boxplot() +
xlab("Transmission type") +
ylab("Miles per gallon")
ggplot(mtcars, aes(x=am, y=mpg, fill=am)) +
geom_boxplot() +
xlab("Transmission type") +
ylab("Miles per gallon")
pairs(mtcars, panel = panel.smooth, main = "Pairs graph for MTCars")
fitUnivariate <- lm(mpg ~ am, data=mtcars)
summary(fitUnivariate)
summary(fitUnivariate)$r.squared*100%
summary(fitUnivariate)$r.squared*100%
summary(fitUnivariate)$r.squared
summary(fitUnivariate)$r.squared*100
round(summary(fitUnivariate)$r.squared*100, digits=2)
pairs(mtcars, panel=panel.smooth, main="Pair Graph of mtcars")
fitMultivariate <- lm(mpg ~ ., data=mtcars)
fitStepwise <- step(fitMultivariate, direction="both", trace=0)
summary(fitStepwise)
par(mfrow = c(2,2))
plot(fitStepwise)
summary(fitStepwise)$coef[6]
summary(fitStepwise)$coef[6,"Pr(>|t|)"]
head(mtcars)
round(summary(fitUnivariate)$r.squared*100, digits=2)
round(summary(fitStepwise)$r.squared*100, digits=2)#R-squared
summary(fitStepwise)$coef[6,"Pr(>|t|)"]#alpha
abs(fitStepwise$coef[2])
abs(fitStepwise$coef[3])
abs(fitStepwise$coef[4])
abs(fitStepwise$coef[5])
c(abs(fitStepwise$coef[2]), abs(fitStepwise$coef[3]), abs(fitStepwise$coef[4]), abs(fitStepwise$coef[5]))
library(MASS)
data(shuttle)
fit <- glm(use ~ wind, family='binomial', shuttle)
exp(fit$coeff)
fit$coeff
fit$coeff[2]
exp(fit$coeff)[2]
exp(fit$coeff)[2]
digit(exp(fit$coeff)[2],3)
round(exp(fit$coeff)[2],3)
exp(fit$coeff)
fit2 <- glm(use ~ wind + as.factor(magn), family='binomial', shuttle)
round(exp(fit2$coeff)[2],3)
fit2 <- glm(use ~ wind + magn, family='binomial', shuttle)
round(exp(fit2$coeff)[2],3)
exp(fit2$coeff)[2]
round(exp(fit2$coeff)[2],3)
fit1 <- glm(use ~ wind + magn, data = shuttle, family=binomial)
df <- shuttle
df$use <- relevel(shuttle$use,"noauto")
fit2 <- glm(use ~ wind + magn, data = df, family=binomial)
summary(fit1)
summary(fit2)
fit1$coeff
fit2$coeff
fit1 <- glm(use ~ wind + magn, data = shuttle, family=binomial)
shuttle2 <- shuttle
shuttle2$use <- relevel(shuttle2$use,"noauto")
fit2 <- glm(use ~ wind + magn, data = shuttle2, family=binomial)
fit1$coeff
fit2$coeff
data(InsectSprays)
fit <- glm(count ~ spray, data=InsectSprays, family=poisson)
exp(fit$coefficients[1])/exp(fit$coefficients[1]+fit$coefficients[2])
round(exp(fit$coefficients[1])/exp(fit$coefficients[1]+fit$coefficients[2]), 4)
InsectSprays$t <- seq(1:nrow(InsectSprays))
InsectSprays$t2 <- log(10) + InsectSprays$t
fit <- glm(count ~ spray + offset(t), data=InsectSprays, family=poisson)
fitT <- glm(count ~ spray + offset(t2), data=InsectSprays, family=poisson)
fit$coeff
fitT$coeff
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
d1 <- c(0, 0 ,0, 0, 0,  0,  1 , 1,  1 , 1 , 1)
d2 <- c(1, 1 ,1, 1, 1,  1,  0 , 0,  0, 0 , 0)
fit <- lm(y ~ d1*x))
fit <- lm(y ~ d1*x)
summary(fit)
fit$coeff
fit$coefficients[2]+fit$coefficients[3]
knots <- c(0)
splineTerms <- sapply(knots, function(knot) (x>0)*(x-knot))
xMat <- cbind(x,splineTerms)
fit <- lm(y ~ xMat)
yhat <- predict(fit)
summary(fit)
plot(x,y,frame = FALSE, pch = 21, bg = 'lightblue',cex=2)
lines(x,yhat,col='red',lwd=2)
# slope is
fit$coefficients[2]+fit$coefficients[3]
knots <- c(0)
splineTerms <- sapply(knots, function(knot) (x>0)*(x-knot))
xMat <- cbind(x,splineTerms)
fit <- lm(y ~ xMat)
yhat <- predict(fit)
fit$coefficients[2]+fit$coefficients[3]
round(fit$coefficients[2]+fit$coefficients[3],3)
library(MASS)
quit()
shinyapps::setAccountInfo(name='yaojenkuo', token='C78DF668EE134F538EC050A2DA6CEDA7', secret='9JpGahAHVlmIRP1CYp9wApTCB/YFckvcMnsgefrC')
shiny::runApp('ApplicationInR/quakesTW')
library(shiny)
library(rsconnect)
deployApp()
q()
x <- 1:10
for (index in x){
index^2
}
x <- 1:10
for (index in x){
print(index^2)
}
index <- 1
while(TRUE){
print(index+=4)
if (index>10) break
}
index <- 1
while(TRUE){
print(index++)
if (index>10) break
}
index <- 1
while(TRUE){
print(index <- index+5)
if (index>10) break
}
index <- 1
while(TRUE){
print(index <- index+1)
if (index>10) break
}
index <- 1
while(index<=10){
print(index <- index+1)
}
countOdd <- function(x){
count <- 0
for(index in x){
if(index %% 2 ==1){
k <- k+1
}
return (k)
}
}
countOdd(10)
countOdd <- function(x){
count <- 0
for(index in x){
if(index %% 2 ==1){
count <- count+1
}
return (count)
}
}
countOdd(10)
# 結合for迴圈
countOdd <- function(x){
count <- 0
for(index in x){
if(index %% 2 ==1){
count <- count+1
}
return (count)
}
}
countOdd(20)
countOdd <- function(x){
count <- 0
for(index in x){
if(index %% 2 ==1){
count <- count+1
}
return (count)
}
}
countOdd(c(1:20))
countOdd <- function(x){
count <- 0
for(index in x){
if(index %% 2 ==1) count <- count+1
}
return (count)
}
countOdd(c(1:20))
countOdd(c(1:5))
countOdd <- function(x){
count <- 0
for(index in x){
if(index %% 2 ==1){
count <- count+1
}
}
return (count)
}
countOdd(c(1:5))
countOdd(c(1:7))
countOdd(c(1:9))
setwd("C:/NTUTrainRL2")
Sys.setlocale(category = "LC_ALL", locale = "cht")
accidentList <- readRDS('data/accidentList.rds')
colnames(accidentList) <- c("縣市別", "醫院別", "性別", "國籍別", "年齡", "醫療檢傷", "救護檢傷")
summary(accidentList)
accidentList <- accidentList[accidentList$年齡!=101,]
dotchart(accidentList$age,labels=row.names(accidentList),cex=.7)
dotchart(accidentList$年齡,labels=row.names(accidentList),cex=.7)
View(accidentList)
head(accidentList)
head(accidentList, 50)
head(accidentList, 100)
head(accidentList, 200)
head(accidentList, 300)
setwd("C:/NTUTrainRL2")
Sys.setlocale(category = "LC_ALL", locale = "cht")
accidentList <- readRDS('data/accidentList.rds')
colnames(accidentList) <- c("醫院所在縣市別", "醫院別", "性別", "國籍別", "年齡", "醫療檢傷", "救護檢傷")
summary(accidentList)
accidentList <- accidentList[accidentList$年齡!=101,]
accidentListNewTaipei <- accidentList[accidentList$醫院所在縣市別=='新北市',]
dotchart(accidentListNewTaipei$年齡,labels=row.names(accidentListNewTaipei),cex=.7)
table(accidentList$醫院所在縣市別)
accidentListKaohsiung <- accidentList[accidentList$醫院所在縣市別=='高雄市',]
dotchart(accidentListKaohsiung$年齡,labels=row.names(accidentListKaohsiung),cex=.7)
accidentListKaohsiung <- accidentList[accidentList$醫院所在縣市別=='高雄市',]
dotchart(accidentListKaohsiung$年齡,labels=row.names(accidentListKaohsiung),cex=.7, na.rm=T)
>>>>>>> 024769b6240765e96b58be9adffe6bc7a8c75881
q()
