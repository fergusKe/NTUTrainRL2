nineETFs <- cbind(BLV, JNK[,2], BWS[,2], VT[,2], VWO[,2], IEV[,2], DBC[,2], GXC[,2], EWJ[,2])
names(nineETFs) <- c('Date', 'BLV', 'JNK', 'BWX', 'VT', 'VWO', 'IEV', 'DBC', 'GXC', 'EWJ')
data(djia2012w)
require("financeR")
install.packages("financeR")
ETFts <- timeSeries(nineETFs[, 2:9], nineETFs[, 1])
ETFts_return <- returns(ETFts)
chart.CumReturns(ETFts_return, legend.loc = 'topleft', main = '')
?portfolioFrontier
Frontier <- portfolioFrontier(as.timeSeries(ETFts_return), Spec, constraints = "LongOnly")
Spec <- portfolioSpec()
setSolver(Spec) <- "solveRshortExact"
Frontier <- portfolioFrontier(as.timeSeries(ETFts_return), Spec, constraints = "LongOnly")
Frontier
frontierPlot(Frontier, col = rep('orange', 2), pch = 19)
monteCarloPoints(Frontier, mcSteps = 1000, cex = 0.25, pch = 19)
grid()
grid()
frontierPlot(Frontier, col = rep('orange', 2), pch = 19)
monteCarloPoints(Frontier, mcSteps = 10000, cex = 0.5, pch = 19)
grid()
monteCarloPoints(Frontier, mcSteps = 5000, cex = 0.5, pch = 19)
grid()
frontierPlot(Frontier, col = rep('orange', 2), pch = 19)
monteCarloPoints(Frontier, mcSteps = 5000, cex = 0.5, pch = 19)
grid()
plot(portfolioFrontier(ETFts_return))
plot(portfolioFrontier(ETFts_return))
plot(portfolioFrontier(ETFts_return))
portfolioFrontier(ETFts_return)
result <- portfolioFrontier(ETFts_return)
class(result)
result[1]
result[[1]]
fPortfolio@portfolio
result@portfolio
result <- portfolioFrontier(ETFts_return)@portfolio
result
result@weights
result$weights
ETFts <- timeSeries(nineETFs[, 2:9], nineETFs[, 1])
ETFts_return <- returns(ETFts)
chart.CumReturns(ETFts_return, legend.loc = 'topleft', main = '')
ETFts
nineETFs <- cbind(BLV, JNK[,2], BWS[,2], VT[,2], VWO[,2], IEV[,2], DBC[,2], GXC[,2], EWJ[,2])
names(nineETFs) <- c('Date', 'BLV', 'JNK', 'BWX', 'VT', 'VWO', 'IEV', 'DBC', 'GXC', 'EWJ')
write.csv(nineETFs, 'C:/Users/twntok/Documents/MPT_SASOR/nineETFs.csv', row.names=FALSE)
ETFts <- timeSeries(nineETFs[, 2:10], nineETFs[, 1])
ETFts_return <- returns(ETFts)
chart.CumReturns(ETFts_return, legend.loc = 'topleft', main = '')
ETFts <- timeSeries(nineETFs[, 2:10], nineETFs[, 1])
ETFts
ETFts_return <- returns(ETFts)
chart.CumReturns(ETFts_return, legend.loc = 'topleft', main = '')
chart.CumReturns(ETFts_return, legend.loc = 'top', main = '')
chart.CumReturns(ETFts_return, legend.loc = 'bottom', main = '')
chart.CumReturns(ETFts_return, legend.loc = 'topleft', main = '')
Spec <- portfolioSpec()
setSolver(Spec) <- "solveRshortExact"
Frontier <- portfolioFrontier(as.timeSeries(ETFts_return), Spec, constraints = "LongOnly")
Frontier
result <- portfolioFrontier(ETFts_return)@portfolio
result
urlBlank <- "http://real-chart.finance.yahoo.com/table.csv?s=%s&a=02&b=20&c=2015&d=03&e=22&f=2016&g=d&ignore=.csv"
BLV_url <- sprintf(urlBlank, 'BLV')
JNK_url <- sprintf(urlBlank, 'JNK')
BWX_url <- sprintf(urlBlank, 'BWX')
VT_url <- sprintf(urlBlank, 'VT')
VWO_url <- sprintf(urlBlank, 'VWO')
IEV_url <- sprintf(urlBlank, 'IEV')
DBC_url <- sprintf(urlBlank, 'DBC')
GXC_url <- sprintf(urlBlank, 'GXC')
EWJ_url <- sprintf(urlBlank, 'EWJ')
BLV <- yahoo.read(BLV_url)
JNK <- yahoo.read(JNK_url)
BWS <- yahoo.read(BWX_url)
VT <- yahoo.read(VT_url)
VWO <- yahoo.read(VWO_url)
IEV <- yahoo.read(IEV_url)
DBC <- yahoo.read(DBC_url)
GXC <- yahoo.read(GXC_url)
EWJ <- yahoo.read(EWJ_url)
nineETFs <- cbind(BLV, JNK[,2], BWS[,2], VT[,2], VWO[,2], IEV[,2], DBC[,2], GXC[,2], EWJ[,2])
names(nineETFs) <- c('Date', 'BLV', 'JNK', 'BWX', 'VT', 'VWO', 'IEV', 'DBC', 'GXC', 'EWJ')
ETFts <- timeSeries(nineETFs[, 2:10], nineETFs[, 1])
ETFts_return <- returns(ETFts)
chart.CumReturns(ETFts_return, legend.loc = 'topleft', main = '')
Spec <- portfolioSpec()
setSolver(Spec) <- "solveRshortExact"
Frontier <- portfolioFrontier(as.timeSeries(ETFts_return), Spec, constraints = "LongOnly")
Frontier
result <- portfolioFrontier(ETFts_return)@portfolio
result
plot(portfolioFrontier(ETFts_return))
result
chart.CumReturns(ETFts_return, legend.loc = 'topleft', main = '')
urlBlank <- "http://real-chart.finance.yahoo.com/table.csv?s=%s&a=02&b=21&c=2016&d=03&e=22&f=2016&g=d&ignore=.csv"
BLV_url <- sprintf(urlBlank, 'BLV')
JNK_url <- sprintf(urlBlank, 'JNK')
BWX_url <- sprintf(urlBlank, 'BWX')
VT_url <- sprintf(urlBlank, 'VT')
VWO_url <- sprintf(urlBlank, 'VWO')
IEV_url <- sprintf(urlBlank, 'IEV')
DBC_url <- sprintf(urlBlank, 'DBC')
GXC_url <- sprintf(urlBlank, 'GXC')
EWJ_url <- sprintf(urlBlank, 'EWJ')
View(BLV)
BLV <- yahoo.read(BLV_url)
JNK <- yahoo.read(JNK_url)
BWS <- yahoo.read(BWX_url)
VT <- yahoo.read(VT_url)
VWO <- yahoo.read(VWO_url)
IEV <- yahoo.read(IEV_url)
DBC <- yahoo.read(DBC_url)
GXC <- yahoo.read(GXC_url)
EWJ <- yahoo.read(EWJ_url)
View(BLV)
urlBlank <- "http://real-chart.finance.yahoo.com/table.csv?s=%s&a=01&b=21&c=2016&d=03&e=22&f=2016&g=d&ignore=.csv"
BLV_url <- sprintf(urlBlank, 'BLV')
JNK_url <- sprintf(urlBlank, 'JNK')
BWX_url <- sprintf(urlBlank, 'BWX')
VT_url <- sprintf(urlBlank, 'VT')
VWO_url <- sprintf(urlBlank, 'VWO')
IEV_url <- sprintf(urlBlank, 'IEV')
DBC_url <- sprintf(urlBlank, 'DBC')
GXC_url <- sprintf(urlBlank, 'GXC')
EWJ_url <- sprintf(urlBlank, 'EWJ')
BLV <- yahoo.read(BLV_url)
JNK <- yahoo.read(JNK_url)
BWS <- yahoo.read(BWX_url)
VT <- yahoo.read(VT_url)
VWO <- yahoo.read(VWO_url)
IEV <- yahoo.read(IEV_url)
DBC <- yahoo.read(DBC_url)
GXC <- yahoo.read(GXC_url)
EWJ <- yahoo.read(EWJ_url)
View(BLV)
nineETFs <- cbind(BLV, JNK[,2], BWS[,2], VT[,2], VWO[,2], IEV[,2], DBC[,2], GXC[,2], EWJ[,2])
names(nineETFs) <- c('Date', 'BLV', 'JNK', 'BWX', 'VT', 'VWO', 'IEV', 'DBC', 'GXC', 'EWJ')
ETFts <- timeSeries(nineETFs[, 2:10], nineETFs[, 1])
ETFts_return <- returns(ETFts)
chart.CumReturns(ETFts_return, legend.loc = 'topleft', main = '')
Spec <- portfolioSpec()
setSolver(Spec) <- "solveRshortExact"
Frontier <- portfolioFrontier(as.timeSeries(ETFts_return), Spec, constraints = "LongOnly")
Frontier
plot(portfolioFrontier(ETFts_return))
result <- portfolioFrontier(ETFts_return)@portfolio
result
Spec <- portfolioSpec()
#setSolver(Spec) <- "solveRshortExact"
Frontier <- portfolioFrontier(as.timeSeries(ETFts_return), Spec, constraints = "LongOnly")
Frontier
result <- portfolioFrontier(ETFts_return)@portfolio
plot(portfolioFrontier(ETFts_return))
result <- portfolioFrontier(ETFts_return)@portfolio
result
urlBlank <- "http://real-chart.finance.yahoo.com/table.csv?s=%s&a=11&b=21&c=2016&d=03&e=22&f=2016&g=d&ignore=.csv"
urlBlank <- "http://real-chart.finance.yahoo.com/table.csv?s=%s&a=11&b=21&c=2015&d=03&e=22&f=2016&g=d&ignore=.csv"
BLV_url <- sprintf(urlBlank, 'BLV')
JNK_url <- sprintf(urlBlank, 'JNK')
BWX_url <- sprintf(urlBlank, 'BWX')
VT_url <- sprintf(urlBlank, 'VT')
VWO_url <- sprintf(urlBlank, 'VWO')
IEV_url <- sprintf(urlBlank, 'IEV')
DBC_url <- sprintf(urlBlank, 'DBC')
GXC_url <- sprintf(urlBlank, 'GXC')
EWJ_url <- sprintf(urlBlank, 'EWJ')
BLV <- yahoo.read(BLV_url)
JNK <- yahoo.read(JNK_url)
BWS <- yahoo.read(BWX_url)
VT <- yahoo.read(VT_url)
VWO <- yahoo.read(VWO_url)
IEV <- yahoo.read(IEV_url)
DBC <- yahoo.read(DBC_url)
GXC <- yahoo.read(GXC_url)
EWJ <- yahoo.read(EWJ_url)
View(BLV)
nineETFs <- cbind(BLV, JNK[,2], BWS[,2], VT[,2], VWO[,2], IEV[,2], DBC[,2], GXC[,2], EWJ[,2])
names(nineETFs) <- c('Date', 'BLV', 'JNK', 'BWX', 'VT', 'VWO', 'IEV', 'DBC', 'GXC', 'EWJ')
ETFts <- timeSeries(nineETFs[, 2:10], nineETFs[, 1])
ETFts_return <- returns(ETFts)
chart.CumReturns(ETFts_return, legend.loc = 'topleft', main = '')
Spec <- portfolioSpec()
#setSolver(Spec) <- "solveRshortExact"
Frontier <- portfolioFrontier(as.timeSeries(ETFts_return), Spec, constraints = "LongOnly")
result <- portfolioFrontier(ETFts_return)@portfolio
plot(portfolioFrontier(ETFts_return))
result
frontierPlot(Frontier, pch = 19)
grid()
abline(h = 0, col = "grey")
abline(v = 0, col = "grey")
singleAssetPoints(Frontier, pch = 19, cex = 1.5, col = topo.colors(6))
singleAssetPoints(Frontier, pch = 19, cex = 1.5)
frontierPlot(Frontier, pch = 19)
abline(v = 0, col = "grey")
abline(h = 0, col = "grey")
minvariancePoints(Frontier, return = c("mean", "mu"))
minvariancePoints(Frontier, return = c("mean", "mu"), pch = 19, cex = 1.5)
minvariancePoints(Frontier, col="red", labels=TRUE)
frontierPlot(Frontier, pch = 19, labels=TRUE)
grid()
abline(h = 0, col = "grey")
abline(v = 0, col = "grey")
minvariancePoints(Frontier, pch = 19, col = "red")
minvariancePoints(Frontier, pch = 19, col = "red", cex=2)
minvariancePoints(Frontier, pch = 20, col = "red", cex=1.5)
minvariancePoints(Frontier, pch = 21, col = "red", cex=1.5)
frontierPlot(Frontier, pch = 19, labels=TRUE)
minvariancePoints(Frontier, pch = 21, col = "red", cex=1.5)
weightsSlider(Frontier)
weightsPlot(Frontier)
frontierPlot(Frontier, pch = 19, labels=TRUE)
grid()
abline(h = 0, col = "grey")
abline(v = 0, col = "grey")
minvariancePoints(Frontier, pch = 18, col = "red", cex=1.5)
singleAssetPoints(Frontier, cex = 1.5, col = topo.colors(9))
frontierPlot(Frontier, pch = 19, labels=TRUE)
grid()
abline(h = 0, col = "grey")
abline(v = 0, col = "grey")
minvariancePoints(Frontier, pch = 18, col = "red", cex=1.5)
singleAssetPoints(Frontier, cex = 1.5, col = topo.colors(9))
frontierPlot(Frontier, pch = 19, labels=TRUE)
grid()
abline(h = 0, col = "grey")
abline(v = 0, col = "grey")
minvariancePoints(Frontier, pch = 18, col = "red", cex=2)
singleAssetPoints(Frontier, cex = 1.5, col = topo.colors(9), pch=17)
getWeights(Frontier)
getTargetReturn(Frontier)
weightETF <- getWeights(Frontier)
returnETF <- getTargetReturns(Frontier)
riskETF <- getTargetRisk(Frontier)
weightETF <- getWeights(Frontier)
returnETF <- getTargetReturn(Frontier)
riskETF <- getTargetRisk(Frontier)
riskETF
frontierPlot(Frontier, pch = 19, labels=TRUE)
grid()
abline(h = 0, col = "grey")
abline(v = 0, col = "grey")
minvariancePoints(Frontier, pch = 18, col = "red", cex=2.5)
singleAssetPoints(Frontier, cex = 2, col = topo.colors(9), pch=17)
weightETF[1, 1]
weightETF[1, ]
riskETF[1, ]
frontierPlot(Frontier, pch = 19, labels=TRUE, risk = c("VaR"))
grid()
abline(h = 0, col = "grey")
abline(v = 0, col = "grey")
minvariancePoints(Frontier, pch = 18, col = "red", cex=2.5)
singleAssetPoints(Frontier, cex = 2, col = topo.colors(9), pch=17)
frontierPlot(Frontier, pch = 19, labels=TRUE, risk = c("VaR"))
grid()
abline(h = 0, col = "grey")
abline(v = 0, col = "grey")
minvariancePoints(Frontier, pch = 18, col = "red", cex=2.5)
singleAssetPoints(Frontier, cex = 2, col = topo.colors(9), pch=17)
frontierPlot(Frontier, pch = 19, risk = c("VaR"), return=c("mean"))
frontierPlot(Frontier, pch = 19, risk = c("VaR"), return=c("mean"), labels=FALSE)
frontierPlot(Frontier, pch = 19)
grid()
abline(h = 0, col = "grey")
abline(v = 0, col = "grey")
minvariancePoints(Frontier, pch = 18, col = "red", cex=2.5)
singleAssetPoints(Frontier, cex = 2, col = topo.colors(9), pch=17)
View(nineETFs)
riskETF[10,]
riskETF[15,]
riskETF[16,]
riskETF[17,]
riskETF[16,]
weightETF[16,]
riskETF[30,]
riskETF[29,]
riskETF[28,]
weightETF[28,]
riskETF[40,]
riskETF[41,]
riskETF[39,]
weightETF[40,]
weightETF[49,]
weightETF[49,]
riskETF[35,]
riskETF[25,]
riskETF[20,]
riskETF[22,]
riskETF[21,]
riskETF[24,]
riskETF[25,]
riskETF[28,]
riskETF[29,]
riskETF[28,]
weightETF[28,]
q()
setwd("C:/NTUTrainRL2")
Sys.setlocale(category = "LC_ALL", locale = "cht")
accidentList <- readRDS('data/accidentList.rds')
colnames(accidentList) <- c("醫院所在縣市別", "醫院別", "性別", "國籍別", "年齡", "醫療檢傷", "救護檢傷")
summary(accidentList)#看到一筆101歲的極端值，好像不太對
accidentListNew <- subset(accidentList, 年齡!=101 | is.na(年齡))#使用一下subset()函數!
par(mfrow=c(3,2))
barPlots <- function(){
variables <- names(accidentListNew[, c(-2, -5)])
for (name in variables){
barplot(table(accidentListNew[ ,name]), main=paste("依",name), ylab="人數")
}
}
barPlots()
barplot(table(accidentListNew$醫院別), main="依醫院別", ylab="人數", las=2)
par(mfrow=c(1,1))
barplot(table(accidentListNew[ ,"醫院所在縣市別"]))
barplot(table(accidentListNew$醫院別), main="依醫院別", ylab="人數", las=2)
?barplot
par(mfrow=c(1,1))
hist(na.omit(accidentListNew$年齡), xlab="年齡", ylab="密度",  main="依年齡", breaks=15, col="skyblue", freq=FALSE, ylim=c(0, 0.12))
rug(jitter(accidentListNew$年齡))#在X軸上顯示資料密度
lines(density(accidentListNew$年齡, na.rm=TRUE), col="red", lwd=2)#hist的freq要設為false才看得到
hist(na.omit(accidentListNew$年齡))
?hist
par(mfrow=c(3,2))
boxPlots <- function(){
variables <- names(accidentListNew[, c(-2, -5)])
for (name in variables){
boxplot(年齡 ~ accidentListNew[ ,name], data=accidentListNew, main=paste('年齡依',name))
}
}
boxPlots()
par(mfrow=c(3,2))
boxPlots <- function(){
variables <- names(accidentListNew[, c(-2, -5)])
for (name in variables){
boxplot(年齡 ~ accidentListNew[ ,name], data=accidentListNew, main=paste('年齡依',name))
}
}
boxPlots()
par(mfrow=c(3,2))
boxPlots <- function(){
variables <- names(accidentListNew[, c(-2, -5)])
for (name in variables){
boxplot(年齡 ~ accidentListNew[ ,name], data=accidentListNew, main=paste('年齡依',name))
}
}
boxPlots()
par(mfrow=c(1,1))
boxplot(年齡 ~ accidentListNew[ ,"國籍別"], data=accidentListNew)
par(mfrow=c(1,1))
accidentListShort <- accidentListNew[accidentListNew$醫院所在縣市別=='桃園市' & !is.na(accidentListNew$年齡), ]
accidentListShortOrder <- accidentListShort[order(accidentListShort$年齡), ]
dotchart(accidentListShortOrder$年齡,labels=row.names(accidentListShortOrder),cex=.7, main="點圖依年齡", xlab="年齡")
slices <- as.vector(table(accidentListNew$醫療檢傷))#把table轉為向量
labels <- paste(names(table(accidentListNew$醫療檢傷)), "\n", slices, "人", sep="")#table就是有名字的向量
pie(slices, labels = labels, main="醫療檢傷人數")
percentage <- round(slices/sum(slices)*100)
labels2 <- paste(names(table(accidentListNew$醫療檢傷)), "\n", percentage, "%", sep="")
pie(slices, labels=labels2, col=rainbow(length(labels2)), main="醫療檢傷比例")
usCrudeOilFromNorway <- c(96, 110, 103, 127, 60, 54, 43, 36, 20, 11, 22)
driverKilledInCollisionWithRailwayTrain <- c(76, 74, 76, 87, 66, 59, 63, 60, 55, 52, 46)
plot(usCrudeOilFromNorway, driverKilledInCollisionWithRailwayTrain, main="Oil Import vs. Railway Kills", xlab="US Crude Oil Imported From Norway(in million barrels per year)", ylab="Driver Killed in Collision With Railway Train(in people per year)", pch=18, col="darkgreen", bg="darkgreen")
abline(lm(driverKilledInCollisionWithRailwayTrain~usCrudeOilFromNorway), col="red", lwd=2) #add regression line
correlation <- round(cor(usCrudeOilFromNorway, driverKilledInCollisionWithRailwayTrain), 4)*100
text(85, 65, paste("Correlation: ",correlation, "%", sep=""))
year <- c(1996, 1997,	1998,	1999,	2000,	2001,	2002,	2003,	2004,	2005,	2006,	2007,	2008,	2009,	2010,	2011,	2012,	2013,	2014)
salaryReal <- c(42520, 44195, 44798, 46040, 46605, 46716, 46330, 47058, 46989, 46447, 46521, 46650, 45038, 43193, 44989, 45508, 44726, 44446, 45494)
plot(year, salaryReal, type="l", main=paste(" 歷年工業及服務業受僱員工以100年價格衡量之實質薪資"), sub=paste("資料來源: 行政院主計總處","\n","https://www.dgbas.gov.tw/public/Attachment/5225164112198I9Y1K.pdf"),  lwd=1, xlab="", ylab="")
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="darkgreen", bg="darkgreen", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15, 16, 17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
par(mfrow=c(1,2))
plot(driverKilledInCollisionWithRailwayTrain~usCrudeOilFromNorway)
plot(driverKilledInCollisionWithRailwayTrain~usCrudeOilFromNorway, xlim=c(0,150), ylim=c(0,100))
par(mfrow=c(1,1))
plot(driverKilledInCollisionWithRailwayTrain~usCrudeOilFromNorway)
par(mfrow=c(1,2))
plot(driverKilledInCollisionWithRailwayTrain~usCrudeOilFromNorway)
plot(driverKilledInCollisionWithRailwayTrain~usCrudeOilFromNorway, xlim=c(0,150), ylim=c(0,100))
Sys.setlocale(category = "LC_ALL", locale = "cht")
nthyear <- c(5, 6,	7, 8,	1,	2,	3,	4,	5,	6,	7,	8,	1,	2,	3,	4,	5,	6,	7)
salaryReal <- c(42520, 44195, 44798, 46040, 46605, 46716, 46330, 47058, 46989, 46447, 46521, 46650, 45038, 43193, 44989, 45508, 44726, 44446, 45494)
presidents <- c("李登輝", "李登輝", "李登輝", "李登輝", "陳水扁", "陳水扁", "陳水扁", "陳水扁", "陳水扁", "陳水扁", "陳水扁", "陳水扁", "馬英九", "馬英九", "馬英九", "馬英九", "馬英九", "馬英九", "馬英九")
lineDataFrame <- data.frame(nthyear, salaryReal, presidents)
library(reshape2)
lineDataFrameCast <- dcast(lineDataFrame, nthyear~presidents, value.var = "salaryReal")
par(mfrow=c(1,1))
plot(lineDataFrameCast[, 2]~lineDataFrameCast[, 1], type="l", col="goldenrod", ylim=c(42000, 50000), lwd=2)
lines(lineDataFrameCast[, 3], type="l", col="blue", lwd=2)
lines(lineDataFrameCast[, 4], type="l", col="darkgreen", lwd=2)
#legend("topright", legend=c("李登輝","馬英九","陳水扁"), col=c("goldenrod", "blue", "darkgreen"), lty=1, lwd=2)#會遮住線
legend("top", legend=c("李登輝","馬英九","陳水扁"), ncol=3, cex=0.8, bty="n", col=c("goldenrod", "blue", "darkgreen"), lty=1, lwd=2)
par(bg="grey")
plot(driverKilledInCollisionWithRailwayTrain~usCrudeOilFromNorway)
par(bg="white")
plot(driverKilledInCollisionWithRailwayTrain~usCrudeOilFromNorway,
main="Plot Title",
col.axis="blue",
col.lab="red",
col.main="darkgreen")
library(ggplot2)
setwd("C:/NTUTrainRL2")
Sys.setlocale(category = "LC_ALL", locale = "cht")
accidentList <- readRDS('data/accidentList.rds')
colnames(accidentList) <- c("醫院所在縣市別", "醫院別", "性別", "國籍別", "年齡", "醫療檢傷", "救護檢傷")
summary(accidentList)#看到一筆101歲的極端值，好像不太對
accidentListNew <- subset(accidentList, 年齡!=101 | is.na(年齡))#使用一下subset()函數!
p1 <- ggplot(accidentListNew, aes(x=醫院所在縣市別)) + geom_bar(fill="lightblue", colour="black")+ylab("人數")+ggtitle("依醫院所在縣市別")
p1
p2 <- ggplot(accidentListNew, aes(x=性別)) + geom_bar(fill="lightblue", colour="black")+ylab("人數")+ggtitle("依性別")
p2
p3 <- ggplot(accidentListNew, aes(x=國籍別)) + geom_bar(fill="lightblue", colour="black")+ylab("人數")+ggtitle("依國籍別")
p3
p6 <- ggplot(accidentListNew, aes(x=醫院別)) + geom_bar(fill="lightblue", colour="black")+ylab("人數")+ggtitle("依醫院別")+theme(axis.text.x = element_text(angle = 90, hjust = 1))
p6
ggplot(accidentListNew, aes(x=年齡))+geom_histogram(binwidth=3, fill="lightblue", colour="black")+ggtitle("八仙傷亡年齡直方圖")+ylab("頻率")
p1 <- ggplot(accidentListNew, aes(x=醫院所在縣市別, y=年齡)) + geom_boxplot()+ggtitle("年齡依醫院所在縣市別")
p1
accidentListShortOrder <- accidentListShort[order(accidentListShort$年齡), ]
ggplot(accidentListShortOrder, aes(x = 年齡, y=reorder(row.names(accidentListShortOrder), 年齡))) + geom_point(size=3)+ylab("編號")+ggtitle("點圖依年齡")
slices <- as.vector(table(accidentListNew$醫療檢傷))#把table轉為向量
labels <- names(table(accidentListNew$醫療檢傷))
percentage <- round(slices/sum(slices), 3)
ymax <- cumsum(percentage)
ymin <- c(0, head(ymax, n=-1))
donutData <- data.frame(labels, percentage, ymax, ymin)
ggplot(donutData) + geom_rect(aes(fill=labels, ymax=ymax, ymin=ymin, xmax=4, xmin=3)) + coord_polar(theta="y") + xlim(c(0, 4))
View(donutData)
scatterPlot <- ggplot(scatterPlotData, aes(x=usCrudeOilFromNorway, y=driverKilledInCollisionWithRailwayTrain)) + geom_point(size=4)+ylab("Driver Killed in Collision With Railway Train(in people per year)")+xlab("US Crude Oil Imported From Norway(in million barrels per year)")+ggtitle("High correlation but no causality")
scatterPlotData <- data.frame(usCrudeOilFromNorway, driverKilledInCollisionWithRailwayTrain)
scatterPlot <- ggplot(scatterPlotData, aes(x=usCrudeOilFromNorway, y=driverKilledInCollisionWithRailwayTrain)) + geom_point(size=4)+ylab("Driver Killed in Collision With Railway Train(in people per year)")+xlab("US Crude Oil Imported From Norway(in million barrels per year)")+ggtitle("High correlation but no causality")
scatterPlot
correlation <- round(cor(usCrudeOilFromNorway, driverKilledInCollisionWithRailwayTrain), 4)*100
#add regression line and text
scatterPlot+stat_smooth(method=lm, level=0.99)+annotate("text", label=paste("Correlation=",correlation), x=85, y=60)
year <- c(1996, 1997,	1998,	1999,	2000,	2001,	2002,	2003,	2004,	2005,	2006,	2007,	2008,	2009,	2010,	2011,	2012,	2013,	2014)
salaryReal <- c(42520, 44195, 44798, 46040, 46605, 46716, 46330, 47058, 46989, 46447, 46521, 46650, 45038, 43193, 44989, 45508, 44726, 44446, 45494)
lineGraphData <- data.frame(year, salaryReal)
ggplot(lineGraphData, aes(x=year, y=salaryReal)) + geom_line() + geom_point(size=4)+ggtitle("歷年工業及服務業受僱員工以100年價格衡量之實質薪資")+xlab("")+ylab("")
nthyear <- c(5, 6,  7, 8,	1,	2,	3,	4,	5,	6,	7,	8,	1,	2,	3,	4,	5,	6,	7)
presidents <- c("李登輝", "李登輝", "李登輝", "李登輝", "陳水扁", "陳水扁", "陳水扁", "陳水扁", "陳水扁", "陳水扁", "陳水扁", "陳水扁", "馬英九", "馬英九", "馬英九", "馬英九", "馬英九", "馬英九", "馬英九")
lineGraphData <- data.frame(nthyear, salaryReal, presidents)
ggplot(lineGraphData, aes(x=nthyear, y=salaryReal, colour=presidents))+geom_line(lwd=2)+geom_point(size=4)#automatically assign colors
ggplot(lineGraphData, aes(x=nthyear, y=salaryReal, colour=presidents))+geom_line(lwd=2)+geom_point(size=4)+scale_colour_manual(values = c("李登輝" = "goldenrod", "陳水扁" = "darkgreen", "馬英九" = "blue"))#custom colors
ggplot(lineGraphData, aes(x=year, y=salaryReal)) + geom_line() + geom_point(size=4)+ggtitle("歷年工業及服務業受僱員工以100年價格衡量之實質薪資")+xlab("")+ylab("")+annotate("text", x=1998, y=44000, label="李登輝執政")+annotate("text", x=2002, y=46000, label="陳水扁執政")+annotate("text", x=2011, y=44000, label="馬英九執政")
ggplot(accidentListNew, aes(x=醫院所在縣市別, y=年齡)) + geom_boxplot()+ggtitle("年齡依醫院所在縣市別")
ggplot(accidentListNew, aes(x=醫院所在縣市別, y=年齡)) + geom_boxplot()+ggtitle("年齡依醫院所在縣市別")+coord_flip()
ggplot(accidentListNew, aes(x=醫院所在縣市別, y=年齡)) + geom_boxplot()+ggtitle("年齡依醫院所在縣市別")+ylim(0, 50)
gplot(accidentListNew, aes(x=醫院所在縣市別, y=年齡)) + geom_boxplot()+ggtitle("年齡依醫院所在縣市別")+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank())
ggplot(accidentListNew, aes(x=醫院所在縣市別, y=年齡)) + geom_boxplot()+ggtitle("年齡依醫院所在縣市別")+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank())
ggplot(accidentListNew, aes(x=醫院所在縣市別, y=年齡)) + geom_boxplot()+ggtitle("年齡依醫院所在縣市別")+theme(panel.grid.major.x=element_blank(), panel.grid.minor.x=element_blank())
ggplot(accidentListNew, aes(x=醫院所在縣市別, y=年齡)) + geom_boxplot()+ggtitle("年齡依醫院所在縣市別")+theme(panel.grid.major.y=element_blank(), panel.grid.minor.y=element_blank())
ggplot(accidentListNew, aes(x=醫院所在縣市別, y=年齡)) + geom_boxplot()+ggtitle("年齡依醫院所在縣市別")+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank())
ggplot(accidentListNew, aes(x=醫院所在縣市別, y=年齡)) + geom_boxplot()+ggtitle("年齡依醫院所在縣市別")+theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank())
ggplot(accidentListNew, aes(x=醫院所在縣市別, y=年齡, fill=醫院所在縣市別)) + geom_boxplot()+ggtitle("年齡依醫院所在縣市別")
ggplot(accidentListNew, aes(x=醫院所在縣市別, y=年齡, fill=醫院所在縣市別)) + geom_boxplot()+ggtitle("年齡依醫院所在縣市別")+guides(fill=FALSE)
ggplot(accidentListNew, aes(x=醫院所在縣市別, y=年齡, fill=醫院所在縣市別)) + geom_boxplot()+ggtitle("年齡依醫院所在縣市別")
ggplot(accidentListNew, aes(x=醫院所在縣市別, y=年齡, fill=醫院所在縣市別)) + geom_boxplot()+ggtitle("年齡依醫院所在縣市別")+theme(legend.position="top")
ggplot(accidentListNew, aes(x=性別)) + geom_bar(fill="lightblue", colour="black")+ylab("人數")+ggtitle("依性別")+facet_grid(. ~醫療檢傷)#1*n
colour="black")+ylab("人數")+ggtitle("依性別")+facet_grid(醫療檢傷~救護檢傷)#m*n
ggplot(accidentListNew, aes(x=性別)) + geom_bar(fill="lightblue", colour="black")+ylab("人數")+ggtitle("依性別")+facet_grid(醫療檢傷~救護檢傷)#m*n
ggplot(scatterPlotData, aes(x=usCrudeOilFromNorway, y=driverKilledInCollisionWithRailwayTrain)) + geom_point(colour="red", size=4)
ggplot(accidentListNew, aes(x=年齡))+geom_histogram(binwidth=3, fill="red", colour="black")+ggtitle("八仙傷亡年齡直方圖")+ylab("頻率")
dummyDF <- data.frame(xaxis=c(-5,5))#用來侷限X軸
ggplot(dummyDF, aes(x=xaxis))+stat_function(fun=dnorm)
customFunction <- function(xvar){
1/(1+exp(-xvar+10))
}
dummyDF <- data.frame(xaxis=c(0,20))#用來侷限X軸
ggplot(dummyDF, aes(x=xaxis))+stat_function(fun=customFunction)
presidentsRating <- readRDS('data/presidentsRating.rds')
ggplot(presidentsRating, aes(x=year, y=quarter, fill=rating)) + geom_raster() + #More efficient
#ggplot(presidentsRating, aes(x=year, y=quarter, fill=rating)) + geom_tile()
presidentsRating <- readRDS('data/presidentsRating.rds')
ggplot(presidentsRating, aes(x=year, y=quarter, fill=rating)) + geom_raster()
ggplot(presidentsRating, aes(x=year, y=quarter, fill=rating)) + geom_raster() + scale_x_continuous(breaks=seq(1940, 1976, by=4)) + scale_y_reverse() + scale_fill_gradient2(midpoint=50, mid="grey70", limits=c(0,100))
library(vcd)
mosaic(HairEyeColor, shade=TRUE, legend=FALSE)#用一個table的示範資料集
helloMap <- leaflet() %>%
addTiles() %>% #把預設的地圖圖層加入
addMarkers(lng=121.539366, lat=25.017326, popup="National Taiwan University")
helloMap
sapply(packs, library, character.only=T)
sapply(packs, library, character.only=T)
packs <- c("leaflet", "magrittr")
sapply(packs, library, character.only=T)
helloMap <- leaflet() %>%
addTiles() %>% #把預設的地圖圖層加入
addMarkers(lng=121.539366, lat=25.017326, popup="National Taiwan University")
helloMap
baseMap <- leaflet() %>%
setView(lng = 121.539366, lat = 25.017326, zoom = 14) %>%
addTiles()
baseMap
baseMap <- leaflet() %>%
setView(lng = 121.539366, lat = 25.017326, zoom = 6) %>%
addTiles()
baseMap
baseMap <- leaflet() %>%
setView(lng = 121.539366, lat = 25.017326, zoom = 3) %>%
addTiles()
baseMap
providerMap <- leaflet() %>%
setView(lng = 121.539366, lat = 25.017326, zoom = 10) %>%
addProviderTiles("Stamen.TonerLite")
providerMap
providerMap <- leaflet() %>%
setView(lng = 121.539366, lat = 25.017326, zoom = 10) %>%
addProviderTiles("Thunderforest.OpenCycleMap")
providerMap
q()
