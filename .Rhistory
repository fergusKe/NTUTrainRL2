attach(strawHatPirate2)
strawHatPirate5 <- strawHatPirate2[age>17 & occupation=='Captain',]
View(strawHatPirate5)
attach(strawHatPirate2)
strawHatPirate5 <- strawHatPirate2[age>17 & occupation=="Captain",]
detach(strawHatPirate2)
attach(strawHatPirate2)
strawHatPirate5 <- strawHatPirate2[occupation=="Captain",]
View(strawHatPirate5)
attach(strawHatPirate2)
strawHatPirate5 <- strawHatPirate2[occupation==="Captain",]
attach(strawHatPirate2)
strawHatPirate5 <- strawHatPirate2[occupation=="Captain",]
View(strawHatPirate5)
strawHatPirate5 <- strawHatPirate2[strawHatPirate2$occupation=='Captain', ]
View(strawHatPirate5)
View(strawHatPirate5)
View(strawHatPirate)
View(strawHatPirate2)
strawHatPirate5 <- strawHatPirate2[strawHatPirate2$age>17 & strawHatPirate2$strength>30, ]#2個篩選條件使用&連接
View(strawHatPirate5)
install.packages("sqldf")
strawHatPirate6 <- sqldf("select name, occupation, bounty from strawHatPirate2 where age>17 order by age")
library(sqldf)
strawHatPirate6 <- sqldf("select name, occupation, bounty from strawHatPirate2 where age>17 order by age")
View(strawHatPirate6)
strawHatPirate6 <- sqldf("select name, occupation, bounty, age from strawHatPirate2 where age>17 order by age")
View(strawHatPirate6)
strawHatPirate6 <- sqldf("select name, occupation, bounty, age from strawHatPirate2 where age>17 order by bounty")
View(strawHatPirate6)
View(strawHatPirate2)
sqldf("select avg(age) as avgAge from strawHatPirate2")
View(devilFruitList)
sqldf("select a.name, b.devilFruit from strawHatPirate2 a inner join devilFruitList on a.name=b.name2")
sqldf("select strawHatPirate2.name, devilFruitList.devilFruit from strawHatPirate2 inner join devilFruitList on strawHatPirate2.name=devilFruitList.name2")
q()
q()
naExample <- c(88, NA, 12, 92, 33)
nullExample <- c(88, NULL, 12, 92, 33)
mean(naExample)
mean(naExample, na.rm=TRUE)#na.rm as in NA removoe
mean(nullExample)
matrix <- matrix(1:8, nrow=2)#創造一個2*4的矩陣做範例
matrix
apply(matrix, 1, sum)#把各列加總
apply(matrix, 2, sum)#把各欄加總
sumRow <- apply(matrix, 1, sum)#把各列加總
sumColumn <- apply(matrix, 2, sum)#把各欄加總
typeof(sumRow)
class(sumRow)
str(sumRow)
str(matrix)
class(matrix)
fn <- function(x){
x/10
}
fnRow <- apply(matrix, 1, fn)
fnRow
matrix
fnColumn <- apply(matrix, 2, fn)
fnColumn
?max()
max
min
maximum <- function(x){
sortX <- sort(x, decreasing=TRUE)
return sortX[1]
}
fnRow <- apply(matrix, 1, fn)
maximum <- function(x){
sortX <- sort(x, decreasing=TRUE)
return sortX[1]
}
maximum <- function(x){
return sort(x, decreasing=TRUE)[1]
}
maximum <- function(x){
sort(x, decreasing=TRUE)[1]
}
maxRow <- apply(matrix, 1, maximum)
maxColumn <- apply(matrix, 2, maximum)
maxRow
maxColumn
matrix
maximum <- function(x){
sort(x)[1]
}
maxRow <- apply(matrix, 1, maximum)
maxColumn <- apply(matrix, 2, maximum)
maximum <- function(x){
sort(x, decreasing=TRUE)[1]
}
maxRow <- apply(matrix, 1, maximum)
maxColumn <- apply(matrix, 2, maximum)
findOutliers <- function(x){
findOutlier <- function(xrow){
medianXRow <- median(xrow)
distance <- abs(xrow-medianXRow)
return(which.max(distance))
}
return(apply(x, 1, findOutlier))
}
salesMatrix <- matrix(c(1,2,30,1,10,11,1,50,60), nrow=3)
salesMatrix
salesMatrix <- matrix(c(1,2,30,1,10,11,1,50,60), nrow=3, byrow=TRUE)
salesMatrix
findOutliers(salesMatrix)
findOutliers <- function(x){
findOutlier <- function(xrow){
medianXRow <- median(xrow)
distance <- abs(xrow-medianXRow)
return(which.max(distance))
}
return(apply(x, 2, findOutlier))
}
salesMatrix <- matrix(c(1,2,30,1,10,11,1,50,60), nrow=3, byrow=TRUE)
findOutliers(salesMatrix)
findOutliers <- function(x){
findOutlier <- function(xrow){
medianXRow <- median(xrow)
distance <- abs(xrow-medianXRow)
return(max(distance))
}
return(apply(x, 1, findOutlier))
}
salesMatrix <- matrix(c(1,2,30,1,10,11,1,50,60), nrow=3, byrow=TRUE)
findOutliers(salesMatrix)
findOutliers <- function(x){
findOutlier <- function(xrow){
medianXRow <- median(xrow)
distance <- abs(xrow-medianXRow)
return(which.max(distance))
}
return(apply(x, 1, findOutlier))
}
salesMatrix <- matrix(c(1,2,30,1,10,11,1,50,60), nrow=3, byrow=TRUE)
findOutliers(salesMatrix)
findOutliers <- function(x){
findOutlier <- function(xrow){
medianXRow <- median(xrow)
distance <- abs(xrow-medianXRow)
return(which.max(distance))
}
return(apply(x, 1, findOutlier))
}
salesMatrix <- matrix(c(1,2,30,1,10,11,50,1,60), nrow=3, byrow=TRUE)
findOutliers(salesMatrix)#告訴你第一列的第三個元素、第二列的第一個
list(1:5, 11:15)
lapply(list1, meadian)#應用median函數到list1
lapply(list1, median)#應用median函數到list1
list1 <- list(1:5, 11:15)#創造一個包含兩個vector的list
lapply(list1, median)#應用median函數到list1
sapply(list1, median)#應用median函數到list1
name <- c("Monkey D. Luffy", "Roronoa Zoro", "Nami", "Sanji")
occupation <- c("Captain", "Swordsman", "Navigator", "Chef")
bounty <- c(500000000, 320000000, 66000000, NA)
age <- c(19, 21, 20, 21)
birthday <- c("5/5/1996", "11/11/1994", "7/3/1995", "3/2/1994")
strength <- c(99, 90, 15, 80)
intelligence <- c(20, 30, 90, 40)
strawHatPirate <- data.frame(name, occupation, bounty, age, birthday, strength, intelligence, stringsAsFactors=FALSE)
lapply(strawHatPirate, sort)#對每個變數都應用sort函數
sapply(strawHatPirate, sort)#對每個變數都應用sort函數
name <- c("Monkey D. Luffy", "Roronoa Zoro", "Nami", "Sanji")
occupation <- c("Captain", "Swordsman", "Navigator", "Chef")
bounty <- c(500000000, 320000000, 66000000, NA)
age <- c(19, 21, 20, 21)
birthday <- c("5/5/1996", "11/11/1994", "7/3/1995", "3/2/1994")
strength <- c(99, 90, 15, 80)
intelligence <- c(20, 30, 90, 40)
strawHatPirate <- data.frame(name, occupation, bounty, age, birthday, strength, intelligence, stringsAsFactors=FALSE)
strawHatPirate$birthdayAsDate <- as.Date(strawHatPirate$birthday, "%m/%d/%Y")#Y for 4-digit, y for 2-digit
lapply(strawHatPirate, sort)#對每個變數都應用sort函數
sapply(strawHatPirate, sort)#對每個變數都應用sort函數
strawHatPirate <- strawHatPirate[ ,-c("birthday")]
View(strawHatPirate)
strawHatPirate <- strawHatPirate[ ,-5]
View(strawHatPirate)
lapply(strawHatPirate, sort)#對每個變數都應用sort函數
sapply(strawHatPirate, sort)#對每個變數都應用sort函數
diabetes <- factor(c("Type1", "Type2", "Type1", "Type1"))
status <- factor(c("Poor", "Improved", "Excellent", "Poor"))
patient <- 1:4
patient <- as.character(1:4)
patient <- as.character(1:4)
diabetes <- factor(c("Type1", "Type2", "Type1", "Type1"))
status <- factor(c("Poor", "Improved", "Excellent", "Poor"))
patientDataFrame <- data.frame(patient, diabetes, status)
str(patientDataFrame)
patient <- as.character(1:4)
age <- (33, 55, 60, 75)
diabetes <- factor(c("Type1", "Type2", "Type1", "Type1"))
status <- factor(c("Poor", "Improved", "Excellent", "Poor"))
patientDataFrame <- data.frame(patient, diabetes, status, stringsAsFactors=F)
str(patientDataFrame)
status
tapply(age, diabetes, mean)
tapply(age, status, mean)
status <- c("Poor", "Improved", "Excellent", "Poor")
tapply(age, status, mean)#
status
diabetes
status <- c("Poor", "Improved", "Excellent", "Poor")
statusF <- factor(status)
status <- factor(c("Poor", "Improved", "Excellent", "Poor"))
age <- c(20, 33, 55, 72)
tapply(age, status, mean)
status <- factor(c("Poor", "Improved", "Excellent", "Poor", "Excellent"))
age <- c(20, 33, 55, 72, 61)
tapply(age, status, mean)
q()
year <- c(1996, 1997,	1998,	1999,	2000,	2001,	2002,	2003,	2004,	2005,	2006,	2007,	2008,	2009,	2010,	2011,	2012,	2013,	2014)
salaryReal <- c(42520, 44195, 44798, 46040, 46605, 46716, 46330, 47058, 46989, 46447, 46521, 46650, 45038, 43193, 44989, 45508, 44726, 44446, 45494)
salary <- data.frame(year, salaryReal)
str(salary)
salary$year <- as.Date(salary$year, "%Y")
plot(year, salaryReal, type="l")
points(year, salaryReal)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary")
points(year, salaryReal)
length(year)
year <- c(1996, 1997,	1998,	1999,	2000,	2001,	2002,	2003,	2004,	2005,	2006,	2007,	2008,	2009,	2010,	2011,	2012,	2013,	2014)
salaryReal <- c(42520, 44195, 44798, 46040, 46605, 46716, 46330, 47058, 46989, 46447, 46521, 46650, 45038, 43193, 44989, 45508, 44726, 44446, 45494)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main="Real Salary by Year")
points(year[1:4], salaryReal[1:4], col="blue", bg="blue")
points(year[5:12], salaryReal[5:12], col="green", bg="green")
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue")
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main="Real Salary by Year")
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=22)
points(year[5:12], salaryReal[5:12], col="green", bg="green", pch=22)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=22)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main="Real Salary by Year in Taiwan", lwd=2)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=22)
points(year[5:12], salaryReal[5:12], col="green", bg="green", pch=22)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=22)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main="Real Salary by Year in Taiwan", lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=22)
points(year[5:12], salaryReal[5:12], col="green", bg="green", pch=19)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=22)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main="Real Salary by Year in Taiwan", lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="green", bg="green", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
sys.getlocale()
Sys.getlocale()
Sys.setlocale(category = "LC_ALL", locale = "cht")
legend(80, 75, pch=c(15,16,17), col=c("blue", "green", "blue"), c("李登輝", "陳水扁", "馬英九"), bty=”o”,  box.col=”darkgreen”, cex=.8)
legend(80, 75, pch=c(15,16,17), col=c("blue", "green", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="darkgreen", cex=.8)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main="台灣實質性薪資所得1996-2014", lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="green", bg="green", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend(80, 75, pch=c(15,16,17), col=c("blue", "green", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="darkgreen", cex=.8)
legend(100, 100, pch=c(15,16,17), col=c("blue", "green", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="darkgreen", cex=.8)
legend("topleft", pch=c(15,16,17), col=c("blue", "green", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="darkgreen", cex=.8)
legend("bottomright", pch=c(15,16,17), col=c("blue", "green", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="darkgreen", cex=.8)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main="台灣實質性薪資所得1996-2014", lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="green", bg="green", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15,16,17), col=c("blue", "green", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="darkgreen", cex=.8)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main="以100年價格衡量之實質薪資1996-2014", sub="行政院主計總處103年12月暨全年薪資與生產力統計結果",  lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="green", bg="darkgreen", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15,16,17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main="以100年價格衡量之實質薪資1996-2014", sub="資料來源:行政院主計總處103年12月暨全年薪資與生產力統計結果",  lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="green", bg="darkgreen", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15,16,17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main=paste("以100年價格衡量之實質薪資1996-2014", "\n", "1996-2014"), sub="資料來源: 行政院主計總處103年12月暨全年薪資與生產力統計結果",  lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="green", bg="darkgreen", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15,16,17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main=paste("以100年價格衡量之實質薪資", "\n", "行政院主計總處103年12月暨全年薪資與生產力統計"), sub="資料來源:https://www.dgbas.gov.tw/public/Attachment/5225164112198I9Y1K.pdf",  lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="green", bg="darkgreen", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15,16,17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main=paste("以100年價格衡量之實質薪資", "\n", "行政院主計總處103年12月暨全年薪資與生產力統計"), sub="資料來源: https://www.dgbas.gov.tw/public/Attachment/5225164112198I9Y1K.pdf",  lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="green", bg="darkgreen", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15,16,17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main=paste(" 歷年工業及服務業受僱員工", "\n", "以100年價格衡量之實質薪資"), sub="資料來源: 行政院主計總處","\n","https://www.dgbas.gov.tw/public/Attachment/5225164112198I9Y1K.pdf",  lwd=1)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main=paste(" 歷年工業及服務業受僱員工", "\n", "以100年價格衡量之實質薪資"), sub="資料來源: 行政院主計總處","\n","https://www.dgbas.gov.tw/public/Attachment/5225164112198I9Y1K.pdf",  lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="green", bg="darkgreen", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15,16,17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
plot(year, salaryReal, type="l", xlab="Year", ylab="Real Salary", main=paste(" 歷年工業及服務業受僱員工以100年價格衡量之實質薪資"), sub=paste("資料來源: 行政院主計總處","\n","https://www.dgbas.gov.tw/public/Attachment/5225164112198I9Y1K.pdf"),  lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="green", bg="darkgreen", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15,16,17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
plot(year, salaryReal, type="l", main=paste(" 歷年工業及服務業受僱員工以100年價格衡量之實質薪資"), sub=paste("資料來源: 行政院主計總處","\n","https://www.dgbas.gov.tw/public/Attachment/5225164112198I9Y1K.pdf"),  lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="green", bg="darkgreen", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15,16,17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
legend("bottomright", pch=c(15,16,17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
legend("bottomright", pch=c(15,18,17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
legend("bottomright", pch=c(15,16,17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
plot(year, salaryReal, type="l", main=paste(" 歷年工業及服務業受僱員工以100年價格衡量之實質薪資"), sub=paste("資料來源: 行政院主計總處","\n","https://www.dgbas.gov.tw/public/Attachment/5225164112198I9Y1K.pdf"),  lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="darkgreen", bg="darkgreen", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15,16,17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
plot(year, salaryReal, type="l", main=paste(" 歷年工業及服務業受僱員工以100年價格衡量之實質薪資"), sub=paste("資料來源: 行政院主計總處","\n","https://www.dgbas.gov.tw/public/Attachment/5225164112198I9Y1K.pdf"),  lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=17)
points(year[5:12], salaryReal[5:12], col="darkgreen", bg="darkgreen", pch=18)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=19)
legend("bottomright", pch=c(17,18,19), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
plot(year, salaryReal, type="l", main=paste(" 歷年工業及服務業受僱員工以100年價格衡量之實質薪資"), sub=paste("資料來源: 行政院主計總處","\n","https://www.dgbas.gov.tw/public/Attachment/5225164112198I9Y1K.pdf"),  lwd=1)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=0)
points(year[5:12], salaryReal[5:12], col="darkgreen", bg="darkgreen", pch=1)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=2)
legend("bottomright", pch=c(0, 1, 2), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
plot(year, salaryReal, type="l", main=paste(" 歷年工業及服務業受僱員工以100年價格衡量之實質薪資"), sub=paste("資料來源: 行政院主計總處","\n","https://www.dgbas.gov.tw/public/Attachment/5225164112198I9Y1K.pdf"),  lwd=1, xlab=NULL, ylab=NULL)
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="darkgreen", bg="darkgreen", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15, 16, 17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
plot(year, salaryReal, type="l", main=paste(" 歷年工業及服務業受僱員工以100年價格衡量之實質薪資"), sub=paste("資料來源: 行政院主計總處","\n","https://www.dgbas.gov.tw/public/Attachment/5225164112198I9Y1K.pdf"),  lwd=1, xlab="", ylab="")
points(year[1:4], salaryReal[1:4], col="blue", bg="blue", pch=15)
points(year[5:12], salaryReal[5:12], col="darkgreen", bg="darkgreen", pch=16)
points(year[13:length(year)], salaryReal[13:length(salaryReal)], col="blue", bg="blue", pch=17)
legend("bottomright", pch=c(15, 16, 17), col=c("blue", "darkgreen", "blue"), c("李登輝", "陳水扁", "馬英九"), bty="o",  box.col="black", cex=.8)
q()
q()
setwd("C:/NTUTrainRL2")
Sys.setlocale(category = "LC_ALL", locale = "cht")
accidentList <- readRDS('data/accidentList.rds')
colnames(accidentList) <- c("醫院所在縣市別", "醫院別", "性別", "國籍別", "年齡", "醫療檢傷", "救護檢傷")
summary(accidentList)#看到一筆101歲的極端值，好像不太對
accidentListNew <- subset(accidentList, 年齡!=101 | is.na(年齡))#使用一下subset()函數!
library(ggplot2)
ggplot(accidentListNew, aes(x=醫院所在縣市別)) + geom_bar()
ggplot(accidentListNew, aes(x=醫院所在縣市別)) + geom_bar(fill="lightblue", colour="black")
ggplot(accidentListNew, aes(x=醫院所在縣市別)) + geom_bar(fill="lightblue", colour="black")+ylab("人數")+main("人數依醫院所在縣市別")
ggplot(accidentListNew, aes(x=醫院所在縣市別)) + geom_bar(fill="lightblue", colour="black")+ylab("人數")+title("人數依醫院所在縣市別")
ggplot(accidentListNew, aes(x=醫院所在縣市別)) + geom_bar(fill="lightblue", colour="black")+ylab("人數")
ggplot(accidentListNew, aes(x=醫院所在縣市別)) + geom_bar(fill="lightblue", colour="")+ylab("人數")
ggplot(accidentListNew, aes(x=醫院所在縣市別)) + geom_bar(fill="lightblue", colour="black")+ylab("人數")
ggplot(accidentListNew, aes(x=醫院所在縣市別)) + geom_bar(fill="lightblue", colour="black")+ylab("人數")+ggtitle(paste("依", "醫院所在縣市別", sep=""))
par(mfrow=c(3,2))
barPlots <- function(){
variables <- names(accidentListNew[, c(-2, -5)])
for (name in variables){
ggplot(accidentListNew, aes(x=accidentListNew[ ,name])) + geom_bar(fill="lightblue", colour="black")+ylab("人數")+ggtitle(paste("依", name, sep=""))
#barplot(table(accidentListNew[ ,name]), main=paste("依",name), ylab="人數")
}
}
barPlots()
barPlots()
barPlots()
par(mfrow=c(3,2))
barPlots <- function(){
variables <- names(accidentListNew[, c(-2, -5)])
for (name in variables){
ggplot(accidentListNew, aes(x=accidentListNew[ ,name])) + geom_bar(fill="lightblue", colour="black")+ylab("人數")+ggtitle(paste("依", name, sep=""))
#barplot(table(accidentListNew[ ,name]), main=paste("依",name), ylab="人數")
}
}
barPlots()
View(accidentListNew)
p1 <- ggplot(accidentListNew, aes(x=醫院所在縣市別)) + geom_bar(fill="lightblue", colour="black")+ylab("人數")+ggtitle("依醫院所在縣市別")
p2 <- ggplot(accidentListNew, aes(x=性別)) + geom_bar(fill="lightblue", colour="black")+ylab("人數")+ggtitle("依性別")
p3 <- ggplot(accidentListNew, aes(x=國籍別)) + geom_bar(fill="lightblue", colour="black")+ylab("人數")+ggtitle("依國籍別")
p4 <- ggplot(accidentListNew, aes(x=醫療檢傷)) + geom_bar(fill="lightblue", colour="black")+ylab("人數")+ggtitle("依醫療檢傷別")
p5 <- ggplot(accidentListNew, aes(x=救護檢傷)) + geom_bar(fill="lightblue", colour="black")+ylab("人數")+ggtitle("依救護檢傷別")
p6 <- ggplot(accidentListNew, aes(x=醫院別)) + geom_bar(fill="lightblue", colour="black")+ylab("人數")+ggtitle("依醫院別")
multiplot(p1, p2, p3, p4, p5, p6, cols=2)
library(grid)
multiplot(p1, p2, p3, p4, p5, p6, cols=2)
library("grid", lib.loc="C:/Program Files/R/R-3.2.2/library")
multiplot(p1, p2, p3, p4, p5, p6, cols=2)
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(p1, p2, p3, p4, p5, p6, cols=2)
library(gridExtra)
grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 2)
p1 <- ggplot(accidentListNew, aes(x=醫院所在縣市別)) + geom_bar(fill="lightblue", colour="black")+ylab("人數")+ggtitle("依醫院所在縣市別")
p2 <- ggplot(accidentListNew, aes(x=性別)) + geom_bar(fill="lightblue", colour="black")+ylab("人數")+ggtitle("依性別")
p3 <- ggplot(accidentListNew, aes(x=國籍別)) + geom_bar(fill="lightblue", colour="black")+ylab("人數")+ggtitle("依國籍別")
p4 <- ggplot(accidentListNew, aes(x=醫療檢傷)) + geom_bar(fill="lightblue", colour="black")+ylab("人數")+ggtitle("依醫療檢傷別")
p5 <- ggplot(accidentListNew, aes(x=救護檢傷)) + geom_bar(fill="lightblue", colour="black")+ylab("人數")+ggtitle("依救護檢傷別")
p6 <- ggplot(accidentListNew, aes(x=醫院別)) + geom_bar(fill="lightblue", colour="black")+ylab("人數")+ggtitle("依醫院別")+theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 2)
grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 2, main="八仙傷亡名單長條圖")
grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 2, main="八仙傷亡名單")
grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 2, main="List of Barplots")
grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 2)
ggplot(accidentListNew, aes(x=年齡))+geom_histogram()
ggplot(accidentListNew, aes(x=年齡))+geom_histogram(binwidth=8, fill="lightblue", colour="black")
ggplot(accidentListNew, aes(x=年齡))+geom_histogram(binwidth=5, fill="lightblue", colour="black")
ggplot(accidentListNew, aes(x=年齡))+geom_histogram(binwidth=3, fill="lightblue", colour="black")
ggplot(accidentListNew, aes(x=年齡))+geom_histogram(binwidth=3, fill="lightblue", colour="black")+ggtitle("年齡")+ylab("頻率")
ggplot(accidentListNew, aes(x=年齡))+geom_histogram(binwidth=3, fill="lightblue", colour="black")+ggtitle("八仙傷亡年齡直方圖")+ylab("頻率")
p1 <- ggplot(accidentListNew, aes(x=醫院所在縣市別, y=年齡)) + geom_boxplot()+ggtitle("年齡依醫院所在縣市別")
p1
p1 <- ggplot(accidentListNew, aes(x=醫院所在縣市別, y=年齡)) + geom_boxplot()+ggtitle("年齡依醫院所在縣市別")
p2 <- ggplot(accidentListNew, aes(x=性別, y=年齡)) + geom_boxplot()+ggtitle("年齡依性別")
p3 <- ggplot(accidentListNew, aes(x=國籍別, y=年齡)) + geom_boxplot()+ggtitle("年齡依國籍別")
p4 <- ggplot(accidentListNew, aes(x=醫療檢傷, y=年齡)) + geom_boxplot()+ggtitle("年齡依醫療檢傷別")
p5 <- ggplot(accidentListNew, aes(x=救護檢傷, y=年齡)) + geom_boxplot()+ggtitle("年齡依救護檢傷別")
grid.arrange(p1, p2, p3, p4, p5, ncol = 2)
accidentListShort <- accidentListNew[accidentListNew$醫院所在縣市別=='桃園市' & !is.na(accidentListNew$年齡), ]
accidentListShortOrder <- accidentListShort[order(accidentListShort$年齡), ]
ggplot(accidentListShortOrder, aes(x = 年齡)) + geom_dotplot()
ggplot(accidentListShortOrder, aes(x = 年齡)) + geom_point()
ggplot(accidentListShortOrder, aes(x = 年齡, y=row.names(accidentListShortOrder))) + geom_point(size=3)
accidentListShortOrder <- accidentListShort[order(accidentListShort$年齡), ]
ggplot(accidentListShortOrder, aes(x = 年齡, y=row.names(accidentListShortOrder))) + geom_point(size=3)
ggplot(accidentListShortOrder, aes(x = 年齡, y=reorder(row.names(accidentListShortOrder), 年齡)) + geom_point(size=3)
ggplot(accidentListShortOrder, aes(x = 年齡, y=reorder(row.names(accidentListShortOrder), 年齡))) + geom_point(size=3)
ggplot(accidentListShortOrder, aes(x = 年齡, y=reorder(row.names(accidentListShortOrder), 年齡))) + geom_point(size=3)+ylab("編號")
ggplot(accidentListShortOrder, aes(x = 年齡, y=reorder(row.names(accidentListShortOrder), 年齡))) + geom_point(size=3)+ylab("編號")+ggtitle("點圖依年齡")
ggplot(accidentListNew, aes(fill=醫療檢傷)) + geom_rect() + coord_polar(theta="y")
slices <- as.vector(table(accidentListNew$醫療檢傷))#把table轉為向量
ggplot(accidentListNew, aes(fill=slices)) + geom_rect() + coord_polar(theta="y")
ggplot(accidentListNew) + geom_rect(aes(fill=醫療檢傷)) + coord_polar(theta="y")
slices <- as.vector(table(accidentListNew$醫療檢傷))#把table轉為向量
labels <- paste(names(table(accidentListNew$醫療檢傷)), "\n", slices, "人", sep="")#table就是有名字的向量
slices
names(table(accidentListNew$醫療檢傷))
labels <- names(table(accidentListNew$醫療檢傷))
percentage <- round(slices/sum(slices)*100)
percentage
percentage <- round(slices/sum(slices))
percentage
percentage <- round(slices/sum(slices), 2)
percentage
ymin <- c(0, 0.03, 0.21, 0.58, 0.89)
ymax <- c(0.03, 0.21, 0.58, 0.89, 1)
donutData <- as.data.frame(labels, percentage, ymax, ymin)
donutData <- as.data.frame(labels, percentage, ymax, ymin, row.names=NULL)
View(donutData)
View(donutData)
labels
percentage
labels <- names(table(accidentListNew$醫療檢傷))
percentage <- round(slices/sum(slices), 2)
ymin <- c(0, 0.03, 0.21, 0.58, 0.89)
ymax <- c(0.03, 0.21, 0.58, 0.89, 1)
donutData <- as.data.frame(labels, percentage, ymax, ymin)
type(percentage)
typeof(percentage)
donutData <- as.data.frame(percentage, ymax, ymin)
donutData <- data.frame(labels, percentage, ymax, ymin)
View(donutData)
ggplot(donutData) + geom_rect(aes(fill=labels, ymax=ymax, ymin=ymin, xmax=4, xmin=3)) + coord_polar(theta="y") + xlim(c(0, 4))
ymax <- cumsum(percentage)
percentage <- round(slices/sum(slices), 3)
ymax <- cumsum(percentage)
ymin <- c(0, head(ymax, n=-1))
q()
