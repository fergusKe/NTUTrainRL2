cartModel <- train(Class ~ ., data=train, method="rpart")
cartModel$finalModel
plot(cartModel$finalModel, uniform=T)
text(cartModel$finalModel, cex=0.8)
```
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
treeModel <- train(Area ~ ., data=olive, method="rpart")
newdata = as.data.frame(t(colMeans(olive)))
predict(treeModel, newdata)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelRandomforest <- randomForest(y ~ ., data = vowel.train)
varImp(modelRandomforest)
library(caret)
modelRandomforest <- randomForest(y ~ ., data = vowel.train)
install.packages("randomForest")
library(randomForest)
modelRandomforest <- randomForest(y ~ ., data = vowel.train)
varImp(modelRandomforest)
varImportance <- varImp(modelRandomforest)
order(varImportance)
View(varImportance)
order(varImportance$Overall)
order(varImportance$row.names)
modelRandomforest <- train(y ~ ., data = vowel.train, method="rf")
varImp(modelRandomforest)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelRF <- train(y ~ ., data=vowel.train, method="rf")
modelGBM <- train(y ~ ., data=vowel.train, method="gbm")
predictRF <- predict(modelRF, vowel.test)
predGBM <- predict(modelGBM, vowel.test)
confusionMatrix(predictRF, vowel.test$y)
confusionMatrix(predGBM, vowel.test$y)
pred <- data.frame(predictRF, predGBM, y=vowel.test$y, agree=predictRF == predGBM)
View(pred)
set.seed(62433)
modelRF <- train(diagnosis ~ ., data=training, method="rf")
modelGBM <- train(diagnosis ~ ., data=training, method="gbm")
modelLDA <- train(diagnosis ~ ., data=training, method="lda")
predictRF <- predict(modelRF, testing)
predictGBM <- predict(modelGBM, testing)
predictLDA <- predict(modelLDA, testing)
stackedPredict <- data.frame(predictRF, predictGBM, predictLDA, diagnosis=testing$diagnosis)
modelStacked <- train(diagnosis ~., data=stackedPredict, method="rf")
predictStacked <- predict(modelStacked, testing)
confusionMatrix(predictRF, testing$diagnosis)
confusionMatrix(predictGBM, testing$diagnosis)
confusionMatrix(predictLDA, testing$diagnosis)
confusionMatrix(predictStacked, testing$diagnosis)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modelRF <- train(diagnosis ~ ., data=training, method="rf")
modelGBM <- train(diagnosis ~ ., data=training, method="gbm")
modelLDA <- train(diagnosis ~ ., data=training, method="lda")
predictRF <- predict(modelRF, testing)
predictGBM <- predict(modelGBM, testing)
predictLDA <- predict(modelLDA, testing)
stackedPredict <- data.frame(predictRF, predictGBM, predictLDA, diagnosis=testing$diagnosis)
modelStacked <- train(diagnosis ~., data=stackedPredict, method="rf")
predictStacked <- predict(modelStacked, testing)
confusionMatrix(predictRF, testing$diagnosis)
confusionMatrix(predictGBM, testing$diagnosis)
confusionMatrix(predictLDA, testing$diagnosis)
confusionMatrix(predictStacked, testing$diagnosis)
install.packages("lubridate")
library(lubridate)  # For year() function below
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
dat = read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
modelBats <- bats(tstrain)
predictBats <- forecast(modelBats, level=95, h=dim(testing)[1])
install.packages("forecast")
modelBats <- bats(tstrain)
library(forecast)
modelBats <- bats(tstrain)
dim(testing)
dim(testing)[1]
nrow(testing)
predictBats <- forecast(modelBats, level=95, h=nrow(testing))
predictBats
combination <- data.frame(testing, predictBats)
View(combination)
combination$withinFlag <- combination$Lo.95<combination$visitsTumblr<combination$Hi.95
combination$withinFlag <- (combination$Lo.95<combination$visitsTumblr)&(combination$visitsTumblr<combination$Hi.95)
counts <- table(combination$withinFlag)
counts
prop.table(counts)
prop.table(counts)[2]
install.packages("e1071")
install.packages("e1071")
set.seed(325)
library(e1071)
modelSVM <- svm(CompressiveStrength ~., data=training)
library(e1071)
install.packages("e1071")
install.packages("e1071")
library(e1071)
modelSVM <- svm(CompressiveStrength ~., data=training)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
modelSVM <- svm(CompressiveStrength ~., data=training)
predictSVM <- predict(modelSVM, testing)
accuracySVM <- accuracy(predictSVM, testing$CompressiveStrength)
library(ElemStatLearn)
library(gbm)
accuracySVM <- accuracy(predictSVM, testing$CompressiveStrength)
library(forecast)
accuracySVM <- accuracy(predictSVM, testing$CompressiveStrength)
accuracySVM
set.seed(233)
modelLasso <- train(CompressiveStrength ~ ., data=training, method="lasso")
library(elasticnet)
modelLasso <- train(CompressiveStrength ~ ., data=training, method="lasso")
quit()
library(VIM)
str(sleep)
summary(sleep)
aggr(sleep, combined=T, numbers=T, prop=F, main='Missing Pattern of Sleep', ylab='')
indexInt <- sapply(sleep, is.integer)
sleepIntVar <- sleep[, indexInt]
sleepNumVar <- sleep[, !indexInt]
autoMfrow <- function(n){
if (n%2==0){
par(mfrow=c((n)/2,2))
}else{
par(mfrow=c((n+1)/2,2))
}
}
autoMfrow <- function(n) {
if (n%2==0){
par(mfrow=c((n)/2,2))
} else{
par(mfrow=c((n+1)/2,2))
}
}
autoMfrow <- function(numCnt) {
if (numCnt%2==0){
par(mfrow=c((numCnt)/2,2))
} else{
par(mfrow=c((numCnt+1)/2,2))
}
}
autoMfrow <- function(x){
if (x%%2==0){
par(mfrow=c((x)/2,2))
} else{
par(mfrow=c((x+1)/2,2))
}
}
numCnt <- ncol(sleepNumVar)
autoMfrow(numCnt)
quit()
library(VIM)
matrixplot(sleep)
quit()
quit()
fig_caption: false
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
coef(fit)
residual <- resid(fit)
squaredResidual <- residual^2
residualVariance <- sum(squaredResidual) / (length(residual) - 2)
sqrt(residualVariance)
data(mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
fit$sd
fit$coef
summary(fit)$coef
summary(fit)$coef[,2]
summary(fit)$coef[,2][2]
summary(fit)$coef[,2][2]
exp <- fit$coef[1] + mean(wt) * fit$coef[2]
exp - 2 * summary(fit)$coef[,2][2]
exp <- fit$coef[1] + mean(mtcars$wt) * fit$coef[2]
exp - 2 * summary(fit)$coef[,2][2]
exp <- fit$coef[1] + mean(mtcars$wt) * fit$coef[2]
summary(fit)$coef[,2][2][1]
exp <- fit$coef[1] + mean(mtcars$wt) * fit$coef[2]
summary(fit)$coef[,2][2][2]
exp <- fit$coef[1] + mean(mtcars$wt) * fit$coef[2]
str(summary(fit)$coef[,2][2])
exp <- fit$coef[1] + mean(mtcars$wt) * fit$coef[2]
type(summary(fit)$coef[,2][2])
typeof(summary(fit)$coef[,2][2])
exp - 2 * 0.5591
?mtcars
fit[[1]][1] + 3 * fit[[1]][2]
fit[[1]]
fit[[1]][1]
fit[[1]][1] + fit[[1]][2]*(3000/1000)
fit[[1]][1] + fit[[1]][2]*(3000/1000)
fit[[1]][1] + fit[[1]][2]*(3000/1000)
2 * (fit$coef[2] - 2 * summary(fit)$coef[,2][2])
2 * (fit$coef[2] - (2000/1000) * summary(fit)$coef[,2][2])
(fit$coef[2] - (2000/1000) * summary(fit)$coef[,2][2])
b1+c(1,-1)*qt(p = 0.975, df = fit$df)*summary(fit)$coef[,2][2]
summary(fit)$coef[,2]+c(1,-1)*qt(p = 0.975, df = fit$df)*summary(fit)$coef[,2][2]
summary(fit)$coef[,2][2]+c(1,-1)*qt(p = 0.975, df = fit$df)*summary(fit)$coef[,2][2]
summary(fit)
(2000/1000) * (fit$coef[2] - 2 * summary(fit)$coef[,2][2])
I have an outcome, $Y$, and a predictor, $X$ and fit a linear regression model with $\Y=beta_0+beta_1X+epsilon$Ïµ to obtaain $beta_0$ and $beta_1$. What would be the consequence to the subsequent slope and intercept if I were to refit the model with a new regressor, $X+c$ for some constant, $c$?
attributes(fit)
squaredResiduals <- fit$residuals ^ 2
squaredResiduals <- fit$residuals ^ 2
fitCompared <- lm(mpg ~ 1, mtcars)
squaredComparedResiduals <- fitCompared$residuals ^ 2
sum(squaredResiduals)/sum(squaredComparedResiduals)
Refer back to the `mtcars` data set with mpg as an outcome and weight (wt) as the predictor. About what is the ratio of the the sum of the squared errors, $\sum_{i=1}^{n} (Y_i-\hat\Y_i)^2$ when comparing a model with just an intercept (denominator) to the model with the intercept and slope (numerator)?
fit[[1]][1] + fit[[1]][2]*(3000/1000)
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, mtcars)
summary(fit)$coef[3, 1]
summary(fit)
summary(fit)$coef
fitUnadjusted <- lm(mpg ~ cyl, mtcars)
summary(fitUnadjusted)$coef
fitUnadjusted <- lm(mpg ~ factor(cyl), mtcars)
summary(fitUnadjusted)$coef
fitNonInteraction <- lm(mpg ~ cyl + wt, mtcars)
summary(fitNonInteraction)$adj.r.squared
fitInteraction <- lm(mpg ~ cyl + wt + cyl:wt, mtcars)
summary(fitInteraction)$adj.r.squared
fitNonInteraction <- lm(mpg ~ factor(cyl) + wt, mtcars)
summary(fitNonInteraction)$adj.r.squared
fitInteraction <- lm(mpg ~ factor(cyl) + wt + factor(cyl):wt, mtcars)
summary(fitInteraction)$adj.r.squared
library(lmtest)
lrtest(fit_interaction, fit_non_interaction)
lrtest(fitInteraction, fitNonInteraction)
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit)$coef
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
max(hatvalues(fit))
influence.measures(fit)$infmat[5, 'dfb.x']
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
str(mtcars)
library(ggplot2)
ggplot(mtcars, aes(x=am, y=mpg, fill=transmission)) +
geom_boxplot() +
xlab("Transmission type") +
ylab("Miles per gallon")
ggplot(mtcars, aes(x=am, y=mpg, fill=am)) +
geom_boxplot() +
xlab("Transmission type") +
ylab("Miles per gallon")
pairs(mtcars, panel = panel.smooth, main = "Pairs graph for MTCars")
fitUnivariate <- lm(mpg ~ am, data=mtcars)
summary(fitUnivariate)
summary(fitUnivariate)$r.squared*100%
summary(fitUnivariate)$r.squared*100%
summary(fitUnivariate)$r.squared
summary(fitUnivariate)$r.squared*100
round(summary(fitUnivariate)$r.squared*100, digits=2)
pairs(mtcars, panel=panel.smooth, main="Pair Graph of mtcars")
fitMultivariate <- lm(mpg ~ ., data=mtcars)
fitStepwise <- step(fitMultivariate, direction="both", trace=0)
summary(fitStepwise)
par(mfrow = c(2,2))
plot(fitStepwise)
summary(fitStepwise)$coef[6]
summary(fitStepwise)$coef[6,"Pr(>|t|)"]
head(mtcars)
round(summary(fitUnivariate)$r.squared*100, digits=2)
round(summary(fitStepwise)$r.squared*100, digits=2)#R-squared
summary(fitStepwise)$coef[6,"Pr(>|t|)"]#alpha
abs(fitStepwise$coef[2])
abs(fitStepwise$coef[3])
abs(fitStepwise$coef[4])
abs(fitStepwise$coef[5])
c(abs(fitStepwise$coef[2]), abs(fitStepwise$coef[3]), abs(fitStepwise$coef[4]), abs(fitStepwise$coef[5]))
library(MASS)
data(shuttle)
fit <- glm(use ~ wind, family='binomial', shuttle)
exp(fit$coeff)
fit$coeff
fit$coeff[2]
exp(fit$coeff)[2]
exp(fit$coeff)[2]
digit(exp(fit$coeff)[2],3)
round(exp(fit$coeff)[2],3)
exp(fit$coeff)
fit2 <- glm(use ~ wind + as.factor(magn), family='binomial', shuttle)
round(exp(fit2$coeff)[2],3)
fit2 <- glm(use ~ wind + magn, family='binomial', shuttle)
round(exp(fit2$coeff)[2],3)
exp(fit2$coeff)[2]
round(exp(fit2$coeff)[2],3)
fit1 <- glm(use ~ wind + magn, data = shuttle, family=binomial)
df <- shuttle
df$use <- relevel(shuttle$use,"noauto")
fit2 <- glm(use ~ wind + magn, data = df, family=binomial)
summary(fit1)
summary(fit2)
fit1$coeff
fit2$coeff
fit1 <- glm(use ~ wind + magn, data = shuttle, family=binomial)
shuttle2 <- shuttle
shuttle2$use <- relevel(shuttle2$use,"noauto")
fit2 <- glm(use ~ wind + magn, data = shuttle2, family=binomial)
fit1$coeff
fit2$coeff
data(InsectSprays)
fit <- glm(count ~ spray, data=InsectSprays, family=poisson)
exp(fit$coefficients[1])/exp(fit$coefficients[1]+fit$coefficients[2])
round(exp(fit$coefficients[1])/exp(fit$coefficients[1]+fit$coefficients[2]), 4)
InsectSprays$t <- seq(1:nrow(InsectSprays))
InsectSprays$t2 <- log(10) + InsectSprays$t
fit <- glm(count ~ spray + offset(t), data=InsectSprays, family=poisson)
fitT <- glm(count ~ spray + offset(t2), data=InsectSprays, family=poisson)
fit$coeff
fitT$coeff
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
d1 <- c(0, 0 ,0, 0, 0,  0,  1 , 1,  1 , 1 , 1)
d2 <- c(1, 1 ,1, 1, 1,  1,  0 , 0,  0, 0 , 0)
fit <- lm(y ~ d1*x))
fit <- lm(y ~ d1*x)
summary(fit)
fit$coeff
fit$coefficients[2]+fit$coefficients[3]
knots <- c(0)
splineTerms <- sapply(knots, function(knot) (x>0)*(x-knot))
xMat <- cbind(x,splineTerms)
fit <- lm(y ~ xMat)
yhat <- predict(fit)
summary(fit)
plot(x,y,frame = FALSE, pch = 21, bg = 'lightblue',cex=2)
lines(x,yhat,col='red',lwd=2)
# slope is
fit$coefficients[2]+fit$coefficients[3]
knots <- c(0)
splineTerms <- sapply(knots, function(knot) (x>0)*(x-knot))
xMat <- cbind(x,splineTerms)
fit <- lm(y ~ xMat)
yhat <- predict(fit)
fit$coefficients[2]+fit$coefficients[3]
round(fit$coefficients[2]+fit$coefficients[3],3)
library(MASS)
quit()
shinyapps::setAccountInfo(name='yaojenkuo', token='C78DF668EE134F538EC050A2DA6CEDA7', secret='9JpGahAHVlmIRP1CYp9wApTCB/YFckvcMnsgefrC')
shiny::runApp('ApplicationInR/quakesTW')
library(shiny)
library(rsconnect)
deployApp()
q()
x <- 1:10
for (index in x){
index^2
}
x <- 1:10
for (index in x){
print(index^2)
}
index <- 1
while(TRUE){
print(index+=4)
if (index>10) break
}
index <- 1
while(TRUE){
print(index++)
if (index>10) break
}
index <- 1
while(TRUE){
print(index <- index+5)
if (index>10) break
}
index <- 1
while(TRUE){
print(index <- index+1)
if (index>10) break
}
index <- 1
while(index<=10){
print(index <- index+1)
}
countOdd <- function(x){
count <- 0
for(index in x){
if(index %% 2 ==1){
k <- k+1
}
return (k)
}
}
countOdd(10)
countOdd <- function(x){
count <- 0
for(index in x){
if(index %% 2 ==1){
count <- count+1
}
return (count)
}
}
countOdd(10)
# çµåforè¿´å
countOdd <- function(x){
count <- 0
for(index in x){
if(index %% 2 ==1){
count <- count+1
}
return (count)
}
}
countOdd(20)
countOdd <- function(x){
count <- 0
for(index in x){
if(index %% 2 ==1){
count <- count+1
}
return (count)
}
}
countOdd(c(1:20))
countOdd <- function(x){
count <- 0
for(index in x){
if(index %% 2 ==1) count <- count+1
}
return (count)
}
countOdd(c(1:20))
countOdd(c(1:5))
countOdd <- function(x){
count <- 0
for(index in x){
if(index %% 2 ==1){
count <- count+1
}
}
return (count)
}
countOdd(c(1:5))
countOdd(c(1:7))
countOdd(c(1:9))
setwd("C:/NTUTrainRL2")
Sys.setlocale(category = "LC_ALL", locale = "cht")
accidentList <- readRDS('data/accidentList.rds')
colnames(accidentList) <- c("ç¸£å¸å¥", "é«é¢å¥", "æ§å¥", "åç±å¥", "å¹´é½¡", "é«çæª¢å·", "æè­·æª¢å·")
summary(accidentList)
accidentList <- accidentList[accidentList$å¹´é½¡!=101,]
dotchart(accidentList$age,labels=row.names(accidentList),cex=.7)
dotchart(accidentList$å¹´é½¡,labels=row.names(accidentList),cex=.7)
View(accidentList)
head(accidentList)
head(accidentList, 50)
head(accidentList, 100)
head(accidentList, 200)
head(accidentList, 300)
setwd("C:/NTUTrainRL2")
Sys.setlocale(category = "LC_ALL", locale = "cht")
accidentList <- readRDS('data/accidentList.rds')
colnames(accidentList) <- c("é«é¢æå¨ç¸£å¸å¥", "é«é¢å¥", "æ§å¥", "åç±å¥", "å¹´é½¡", "é«çæª¢å·", "æè­·æª¢å·")
summary(accidentList)
accidentList <- accidentList[accidentList$å¹´é½¡!=101,]
accidentListNewTaipei <- accidentList[accidentList$é«é¢æå¨ç¸£å¸å¥=='æ°åå¸',]
dotchart(accidentListNewTaipei$å¹´é½¡,labels=row.names(accidentListNewTaipei),cex=.7)
table(accidentList$é«é¢æå¨ç¸£å¸å¥)
accidentListKaohsiung <- accidentList[accidentList$é«é¢æå¨ç¸£å¸å¥=='é«éå¸',]
dotchart(accidentListKaohsiung$å¹´é½¡,labels=row.names(accidentListKaohsiung),cex=.7)
accidentListKaohsiung <- accidentList[accidentList$é«é¢æå¨ç¸£å¸å¥=='é«éå¸',]
dotchart(accidentListKaohsiung$å¹´é½¡,labels=row.names(accidentListKaohsiung),cex=.7, na.rm=T)
q()
